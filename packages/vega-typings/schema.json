{
  "$ref": "#/definitions/Spec",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AggregateOp": {
      "enum": [
        "argmax",
        "argmin",
        "average",
        "count",
        "distinct",
        "max",
        "mean",
        "median",
        "min",
        "missing",
        "product",
        "q1",
        "q3",
        "ci0",
        "ci1",
        "stderr",
        "stdev",
        "stdevp",
        "sum",
        "valid",
        "values",
        "variance",
        "variancep"
      ],
      "type": "string"
    },
    "AggregateTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": "array"
        },
        "cross": {
          "type": "boolean"
        },
        "drop": {
          "type": "boolean"
        },
        "fields": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/FieldRef"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": "array"
        },
        "groupby": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "key": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "ops": {
          "items": {
            "$ref": "#/definitions/AggregateOp"
          },
          "type": "array"
        },
        "signal": {
          "type": "string"
        },
        "type": {
          "const": "aggregate",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Align": {
      "enum": [
        "left",
        "center",
        "right"
      ],
      "type": "string"
    },
    "AlignValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/Align"
        },
        {
          "$ref": "#/definitions/AlignValueRef"
        }
      ]
    },
    "AlignValueRef": {
      "$ref": "#/definitions/ScaledValueRef<Align>"
    },
    "AnchorValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/TitleAnchor"
        },
        {
          "$ref": "#/definitions/AnchorValueRef"
        }
      ]
    },
    "AnchorValueRef": {
      "$ref": "#/definitions/ScaledValueRef<TitleAnchor>"
    },
    "ArbitraryValueRef": {
      "anyOf": [
        {
          "$ref": "#/definitions/NumericValueRef"
        },
        {
          "$ref": "#/definitions/ColorValueRef"
        },
        {
          "$ref": "#/definitions/ScaledValueRef<any>"
        }
      ]
    },
    "ArcEncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "cornerRadius": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "endAngle": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "innerRadius": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "outerRadius": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "padAngle": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "startAngle": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "ArcMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<ArcEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "arc",
          "type": "string"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "AreaEncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "defined": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "interpolate": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Interpolate>>"
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "orient": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Orientation>>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tension": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "AreaLabelMethod": {
      "enum": [
        "naive",
        "reduced-search",
        "floodfill"
      ],
      "type": "string"
    },
    "AreaMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<AreaEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "area",
          "type": "string"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "ArrayValueRef": {
      "$ref": "#/definitions/ScaledValueRef<any[]>"
    },
    "AutoSize": {
      "anyOf": [
        {
          "$ref": "#/definitions/AutoSizeType"
        },
        {
          "additionalProperties": false,
          "properties": {
            "contains": {
              "enum": [
                "content",
                "padding"
              ],
              "type": "string"
            },
            "resize": {
              "type": "boolean"
            },
            "type": {
              "$ref": "#/definitions/AutoSizeType"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "AutoSizeType": {
      "enum": [
        "pad",
        "fit",
        "fit-x",
        "fit-y",
        "none"
      ],
      "type": "string"
    },
    "Axis": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG group, removing the axis from the ARIA accessibility tree.\n\n__Default value:__ `true`",
          "type": "boolean"
        },
        "bandPosition": {
          "$ref": "#/definitions/NumberValue",
          "description": "An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n\n __Default value:__ `0.5`"
        },
        "description": {
          "description": "A text description of this axis for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If the `aria` property is true, for SVG output the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute) will be set to this description. If the description is unspecified it will be automatically generated.",
          "type": "string"
        },
        "domain": {
          "description": "A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.\n\n__Default value:__ `true`",
          "type": "boolean"
        },
        "domainCap": {
          "$ref": "#/definitions/StrokeCapValue",
          "description": "The stroke cap for the domain line's ending style. One of `\"butt\"`, `\"round\"` or `\"square\"`.\n\n__Default value:__ `\"butt\"`"
        },
        "domainColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "Color of axis domain line.\n\n__Default value:__ `\"gray\"`."
        },
        "domainDash": {
          "$ref": "#/definitions/DashArrayValue",
          "description": "An array of alternating [stroke, space] lengths for dashed domain lines."
        },
        "domainDashOffset": {
          "$ref": "#/definitions/NumberValue",
          "description": "The pixel offset at which to start drawing with the domain dash array."
        },
        "domainOpacity": {
          "$ref": "#/definitions/NumberValue",
          "description": "Opacity of the axis domain line."
        },
        "domainWidth": {
          "$ref": "#/definitions/NumberValue",
          "description": "Stroke width of axis domain line\n\n__Default value:__ `1`"
        },
        "encode": {
          "$ref": "#/definitions/AxisEncode",
          "description": "Mark definitions for custom axis encoding."
        },
        "format": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TimeFormatSpecifier"
            }
          ],
          "description": "The format specifier pattern for axis labels. For numerical values, must be a legal [d3-format](https://github.com/d3/d3-format#locale_format) specifier. For date-time values, must be a legal [d3-time-format](https://github.com/d3/d3-time-format#locale_format) specifier or multi-format object."
        },
        "formatType": {
          "$ref": "#/definitions/FormatType",
          "description": "The format type for axis labels (number, time, or utc)."
        },
        "grid": {
          "description": "A boolean flag indicating if grid lines should be included as part of the axis.",
          "type": "boolean"
        },
        "gridCap": {
          "$ref": "#/definitions/StrokeCapValue",
          "description": "The stroke cap for grid lines' ending style. One of `\"butt\"`, `\"round\"` or `\"square\"`.\n\n__Default value:__ `\"butt\"`"
        },
        "gridColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "Color of gridlines.\n\n__Default value:__ `\"lightGray\"`."
        },
        "gridDash": {
          "$ref": "#/definitions/DashArrayValue",
          "description": "An array of alternating [stroke, space] lengths for dashed grid lines."
        },
        "gridDashOffset": {
          "$ref": "#/definitions/NumberValue",
          "description": "The pixel offset at which to start drawing with the grid dash array."
        },
        "gridOpacity": {
          "$ref": "#/definitions/NumberValue",
          "description": "The stroke opacity of grid (value between [0,1])\n\n__Default value:__ `1`",
          "maximum": 1,
          "minimum": 0
        },
        "gridScale": {
          "description": "The name of the scale to use for including grid lines. By default grid lines are driven by the same scale as the ticks and labels.",
          "type": "string"
        },
        "gridWidth": {
          "$ref": "#/definitions/NumberValue",
          "description": "The grid width, in pixels.\n\n__Default value:__ `1`",
          "minimum": 0
        },
        "labelAlign": {
          "$ref": "#/definitions/AlignValue",
          "description": "Horizontal text alignment of axis tick labels, overriding the default setting for the current axis orientation."
        },
        "labelAngle": {
          "$ref": "#/definitions/NumberValue",
          "description": "The rotation angle of the axis labels.\n\n__Default value:__ `-90` for nominal and ordinal fields; `0` otherwise.",
          "maximum": 360,
          "minimum": -360
        },
        "labelBaseline": {
          "$ref": "#/definitions/TextBaselineValue",
          "description": "Vertical text baseline of axis tick labels, overriding the default setting for the current axis orientation. One of `\"alphabetic\"` (default), `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"line-top\"`, or `\"line-bottom\"`. The `\"line-top\"` and `\"line-bottom\"` values operate similarly to `\"top\"` and `\"bottom\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."
        },
        "labelBound": {
          "description": "Indicates if labels should be hidden if they exceed the axis range. If `false` (the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.\n\n__Default value:__ `false`.",
          "type": [
            "number",
            "boolean"
          ]
        },
        "labelColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "The color of the tick label, can be in hex color code or regular color name."
        },
        "labelFlush": {
          "description": "Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.",
          "type": [
            "number",
            "boolean"
          ]
        },
        "labelFlushOffset": {
          "description": "Indicates the number of pixels by which to offset flush-adjusted labels. For example, a value of `2` will push flush-adjusted labels 2 pixels outward from the center of the axis. Offsets can help the labels better visually group with corresponding axis ticks.\n\n__Default value:__ `0`.",
          "type": "number"
        },
        "labelFont": {
          "$ref": "#/definitions/StringValue",
          "description": "The font of the tick label."
        },
        "labelFontSize": {
          "$ref": "#/definitions/NumberValue",
          "description": "The font size of the label, in pixels.",
          "minimum": 0
        },
        "labelFontStyle": {
          "$ref": "#/definitions/FontStyleValue",
          "description": "Font style of the title."
        },
        "labelFontWeight": {
          "$ref": "#/definitions/FontWeightValue",
          "description": "Font weight of axis tick labels."
        },
        "labelLimit": {
          "$ref": "#/definitions/NumberValue",
          "description": "Maximum allowed pixel width of axis tick labels.\n\n__Default value:__ `180`"
        },
        "labelLineHeight": {
          "$ref": "#/definitions/NumberValue",
          "description": "Line height in pixels for multi-line label text or label text with `\"line-top\"` or `\"line-bottom\"` baseline."
        },
        "labelOffset": {
          "$ref": "#/definitions/NumberValue",
          "description": "Position offset in pixels to apply to labels, in addition to tickOffset.\n\n__Default value:__ `0`"
        },
        "labelOpacity": {
          "$ref": "#/definitions/NumberValue",
          "description": "The opacity of the labels."
        },
        "labelOverlap": {
          "$ref": "#/definitions/LabelOverlap",
          "description": "The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes)."
        },
        "labelPadding": {
          "$ref": "#/definitions/NumberValue",
          "description": "The padding in pixels between labels and ticks.\n\n__Default value:__ `2`"
        },
        "labelSeparation": {
          "description": "The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.",
          "type": "number"
        },
        "labels": {
          "description": "A boolean flag indicating if labels should be included as part of the axis.\n\n__Default value:__ `true`.",
          "type": "boolean"
        },
        "maxExtent": {
          "$ref": "#/definitions/NumberValue",
          "description": "The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.\n\n__Default value:__ `undefined`."
        },
        "minExtent": {
          "$ref": "#/definitions/NumberValue",
          "description": "The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.\n\n__Default value:__ `30` for y-axis; `undefined` for x-axis."
        },
        "offset": {
          "$ref": "#/definitions/NumberValue",
          "description": "The orthogonal offset in pixels by which to displace the axis from its position along the edge of the chart."
        },
        "orient": {
          "$ref": "#/definitions/AxisOrient",
          "description": "The orientation of the axis. One of `\"top\"`, `\"bottom\"`, `\"left\"` or `\"right\"`. The orientation can be used to further specialize the axis type (e.g., a y axis oriented for the right edge of the chart).\n\n__Default value:__ `\"bottom\"` for x-axes and `\"left\"` for y-axes."
        },
        "position": {
          "$ref": "#/definitions/NumberValue",
          "description": "The anchor position of the axis in pixels. For x-axes with top or bottom orientation, this sets the axis group x coordinate. For y-axes with left or right orientation, this sets the axis group y coordinate.\n\n__Default value__: `0`"
        },
        "scale": {
          "description": "The name of the scale backing the axis component.",
          "type": "string"
        },
        "tickBand": {
          "description": "For band scales, indicates if ticks and grid lines should be placed at the `\"center\"` of a band (default) or at the band `\"extent\"`s to indicate intervals",
          "enum": [
            "center",
            "extent"
          ],
          "type": "string"
        },
        "tickCap": {
          "$ref": "#/definitions/StrokeCapValue",
          "description": "The stroke cap for the tick lines' ending style. One of `\"butt\"`, `\"round\"` or `\"square\"`.\n\n__Default value:__ `\"butt\"`"
        },
        "tickColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "The color of the axis's tick.\n\n__Default value:__ `\"gray\"`"
        },
        "tickCount": {
          "$ref": "#/definitions/TickCount",
          "description": "A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are \"nice\" (multiples of `2`, `5`, `10`) and lie within the underlying scale's range.\n\nFor scales of type `\"time\"` or `\"utc\"`, the tick count can instead be a time interval specifier. Legal string values are `\"millisecond\"`, `\"second\"`, `\"minute\"`, `\"hour\"`, `\"day\"`, `\"week\"`, `\"month\"`, and \"year\". Alternatively, an object-valued interval specifier of the form `{\"interval\": \"month\", \"step\": 3}` includes a desired number of interval steps. Here, ticks are generated for each quarter (Jan, Apr, Jul, Oct) boundary.",
          "minimum": 0
        },
        "tickDash": {
          "$ref": "#/definitions/DashArrayValue",
          "description": "An array of alternating [stroke, space] lengths for dashed tick mark lines."
        },
        "tickDashOffset": {
          "$ref": "#/definitions/NumberValue",
          "description": "The pixel offset at which to start drawing with the tick mark dash array."
        },
        "tickExtra": {
          "$ref": "#/definitions/BooleanValue",
          "description": "Boolean flag indicating if an extra axis tick should be added for the initial position of the axis. This flag is useful for styling axes for `band` scales such that ticks are placed on band boundaries rather in the middle of a band. Use in conjunction with `\"bandPosition\": 1` and an axis `\"padding\"` value of `0`."
        },
        "tickMinStep": {
          "description": "The minimum desired step between axis ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.",
          "type": "number"
        },
        "tickOffset": {
          "$ref": "#/definitions/NumberValue",
          "description": "Position offset in pixels to apply to ticks, labels, and gridlines."
        },
        "tickOpacity": {
          "$ref": "#/definitions/NumberValue",
          "description": "Opacity of the ticks."
        },
        "tickRound": {
          "$ref": "#/definitions/BooleanValue",
          "description": "Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n\n__Default value:__ `true`"
        },
        "tickSize": {
          "$ref": "#/definitions/NumberValue",
          "description": "The size in pixels of axis ticks.\n\n__Default value:__ `5`",
          "minimum": 0
        },
        "tickWidth": {
          "$ref": "#/definitions/NumberValue",
          "description": "The width, in pixels, of ticks.\n\n__Default value:__ `1`",
          "minimum": 0
        },
        "ticks": {
          "$ref": "#/definitions/BooleanValue",
          "description": "Boolean value that determines whether the axis should include ticks.\n\n__Default value:__ `true`"
        },
        "title": {
          "$ref": "#/definitions/Text",
          "description": "A title for the axis (none by default)."
        },
        "titleAlign": {
          "$ref": "#/definitions/AlignValue",
          "description": "Horizontal text alignment of axis titles."
        },
        "titleAnchor": {
          "$ref": "#/definitions/AnchorValue",
          "description": "Text anchor position for placing axis titles."
        },
        "titleAngle": {
          "$ref": "#/definitions/NumberValue",
          "description": "Angle in degrees of axis titles."
        },
        "titleBaseline": {
          "$ref": "#/definitions/TextBaselineValue",
          "description": "Vertical text baseline for axis titles. One of `\"alphabetic\"` (default), `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"line-top\"`, or `\"line-bottom\"`. The `\"line-top\"` and `\"line-bottom\"` values operate similarly to `\"top\"` and `\"bottom\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."
        },
        "titleColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "Color of the title, can be in hex color code or regular color name."
        },
        "titleFont": {
          "$ref": "#/definitions/StringValue",
          "description": "Font of the title. (e.g., `\"Helvetica Neue\"`)."
        },
        "titleFontSize": {
          "$ref": "#/definitions/NumberValue",
          "description": "Font size of the title.",
          "minimum": 0
        },
        "titleFontStyle": {
          "$ref": "#/definitions/FontStyleValue",
          "description": "Font style of the title."
        },
        "titleFontWeight": {
          "$ref": "#/definitions/FontWeightValue",
          "description": "Font weight of the title. This can be either a string (e.g `\"bold\"`, `\"normal\"`) or a number (`100`, `200`, `300`, ..., `900` where `\"normal\"` = `400` and `\"bold\"` = `700`)."
        },
        "titleLimit": {
          "$ref": "#/definitions/NumberValue",
          "description": "Maximum allowed pixel width of axis titles.",
          "minimum": 0
        },
        "titleLineHeight": {
          "$ref": "#/definitions/NumberValue",
          "description": "Line height in pixels for multi-line title text or title text with `\"line-top\"` or `\"line-bottom\"` baseline."
        },
        "titleOpacity": {
          "$ref": "#/definitions/NumberValue",
          "description": "Opacity of the axis title."
        },
        "titlePadding": {
          "$ref": "#/definitions/NumberValue",
          "description": "The padding, in pixels, between title and axis."
        },
        "titleX": {
          "$ref": "#/definitions/NumberValue",
          "description": "X-coordinate of the axis title relative to the axis group."
        },
        "titleY": {
          "$ref": "#/definitions/NumberValue",
          "description": "Y-coordinate of the axis title relative to the axis group."
        },
        "translate": {
          "$ref": "#/definitions/NumberValue",
          "description": "Coordinate space translation offset for axis layout. By default, axes are translated by a 0.5 pixel offset for both the x and y coordinates in order to align stroked lines with the pixel grid. However, for vector graphics output these pixel-specific adjustments may be undesirable, in which case translate can be changed (for example, to zero).\n\n__Default value:__ `0.5`"
        },
        "values": {
          "description": "Explicitly set the visible axis tick and label values.",
          "items": {
          },
          "type": "array"
        },
        "zindex": {
          "description": "The integer z-index indicating the layering of the axis group relative to other axis, mark, and legend groups.",
          "minimum": 0,
          "type": "number"
        }
      },
      "required": [
        "orient",
        "scale"
      ],
      "type": "object"
    },
    "AxisConfig": {
      "$ref": "#/definitions/ExcludeMappedValueRef<BaseAxis>"
    },
    "AxisEncode": {
      "additionalProperties": false,
      "properties": {
        "axis": {
          "$ref": "#/definitions/GuideEncodeEntry<GroupEncodeEntry>",
          "description": "Custom encoding for the axis container."
        },
        "domain": {
          "$ref": "#/definitions/GuideEncodeEntry<RuleEncodeEntry>",
          "description": "Custom encoding for the axis domain rule mark."
        },
        "grid": {
          "$ref": "#/definitions/GuideEncodeEntry<RuleEncodeEntry>",
          "description": "Custom encoding for axis gridline rule marks."
        },
        "labels": {
          "$ref": "#/definitions/GuideEncodeEntry<TextEncodeEntry>",
          "description": "Custom encoding for axis label text marks."
        },
        "ticks": {
          "$ref": "#/definitions/GuideEncodeEntry<GroupEncodeEntry>",
          "description": "Custom encoding for axis tick rule marks."
        },
        "title": {
          "$ref": "#/definitions/GuideEncodeEntry<TextEncodeEntry>",
          "description": "Custom encoding for the axis title text mark."
        }
      },
      "type": "object"
    },
    "AxisOrient": {
      "enum": [
        "top",
        "bottom",
        "left",
        "right"
      ],
      "type": "string"
    },
    "BandScale": {
      "additionalProperties": false,
      "properties": {
        "align": {
          "type": "number"
        },
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "name": {
          "type": "string"
        },
        "padding": {
          "type": "number"
        },
        "paddingInner": {
          "type": "number"
        },
        "paddingOuter": {
          "type": "number"
        },
        "range": {
          "$ref": "#/definitions/RangeBand"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "band",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "BaseData": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnTrigger"
          },
          "type": "array"
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "BaseLegendLayout": {
      "additionalProperties": false,
      "properties": {
        "anchor": {
          "$ref": "#/definitions/TitleAnchor",
          "description": "The anchor point for legend orient group layout."
        },
        "bounds": {
          "$ref": "#/definitions/LayoutBounds",
          "description": "The bounds calculation to use for legend orient group layout."
        },
        "center": {
          "description": "A flag to center legends within a shared orient group.",
          "type": "boolean"
        },
        "direction": {
          "$ref": "#/definitions/Orientation",
          "description": "The layout direction for legend orient group layout."
        },
        "margin": {
          "description": "The pixel margin between legends within a orient group.",
          "type": "number"
        },
        "offset": {
          "description": "The pixel offset from the chart body for a legend orient group.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "BaseValueRef<Align>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Align"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<Baseline>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Baseline"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<Blend>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Blend"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<Color>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Color"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<Cursor>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Cursor"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<FontStyle>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/FontStyle"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<FontWeight>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/FontWeight"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<Interpolate>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Interpolate"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<Orient>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Orient"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<Orientation>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Orientation"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<StrokeCap>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/StrokeCap"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<StrokeJoin>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/StrokeJoin"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<SymbolShape>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SymbolShape"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<Text>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Text"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<TextBaseline>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextBaseline"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<TextDirection>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextDirection"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<TitleAnchor>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TitleAnchor"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<any>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<any[]>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "items": {
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<boolean>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "type": [
                "boolean",
                "null"
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<number[]>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "BaseValueRef<string>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "Baseline": {
      "enum": [
        "top",
        "middle",
        "bottom"
      ],
      "type": "string"
    },
    "BinOrdinalScale": {
      "additionalProperties": false,
      "properties": {
        "bins": {
          "$ref": "#/definitions/ScaleBins"
        },
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "interpolate": {
          "$ref": "#/definitions/ScaleInterpolate"
        },
        "name": {
          "type": "string"
        },
        "range": {
          "anyOf": [
            {
              "$ref": "#/definitions/RangeScheme"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "bin-ordinal",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "BinTransform": {
      "additionalProperties": false,
      "properties": {
        "anchor": {
          "type": "number"
        },
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "base": {
          "description": "The number base to use for automatic bin determination (default is base 10).\n\n__Default value:__ `10`",
          "type": "number"
        },
        "divide": {
          "$ref": "#/definitions/Vector2<number>",
          "description": "Scale factors indicating allowable subdivisions. The default value is [5, 2], which indicates that for base 10 numbers (the default base), the method may consider dividing bin sizes by 5 and/or 2. For example, for an initial step size of 10, the method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might also satisfy the given constraints.\n\n__Default value:__ `[5, 2]`",
          "minItems": 1
        },
        "extent": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "interval": {
          "type": "boolean"
        },
        "maxbins": {
          "description": "Maximum number of bins.\n\n__Default value:__ `6` for `row`, `column` and `shape` channels; `10` for other channels",
          "minimum": 2,
          "type": "number"
        },
        "minstep": {
          "description": "A minimum allowable step size (particularly useful for integer values).",
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "nice": {
          "description": "If true (the default), attempts to make the bin boundaries use human-friendly boundaries, such as multiples of ten.",
          "type": "boolean"
        },
        "signal": {
          "$ref": "#/definitions/SignalName"
        },
        "span": {
          "type": "number"
        },
        "step": {
          "description": "An exact step size to use between bins.\n\n__Note:__ If provided, options such as maxbins will be ignored.",
          "type": "number"
        },
        "steps": {
          "description": "An array of allowable step sizes to choose from.",
          "items": {
            "type": "number"
          },
          "minItems": 1,
          "type": "array"
        },
        "type": {
          "const": "bin",
          "type": "string"
        }
      },
      "required": [
        "type",
        "field",
        "extent"
      ],
      "type": "object"
    },
    "BindCheckbox": {
      "additionalProperties": false,
      "properties": {
        "debounce": {
          "type": "number"
        },
        "element": {
          "$ref": "#/definitions/Element"
        },
        "input": {
          "const": "checkbox",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "input"
      ],
      "type": "object"
    },
    "BindRadioSelect": {
      "additionalProperties": false,
      "properties": {
        "debounce": {
          "type": "number"
        },
        "element": {
          "$ref": "#/definitions/Element"
        },
        "input": {
          "enum": [
            "radio",
            "select"
          ],
          "type": "string"
        },
        "labels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "options": {
          "items": {
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "input",
        "options"
      ],
      "type": "object"
    },
    "BindRange": {
      "additionalProperties": false,
      "properties": {
        "debounce": {
          "type": "number"
        },
        "element": {
          "$ref": "#/definitions/Element"
        },
        "input": {
          "const": "range",
          "type": "string"
        },
        "max": {
          "type": "number"
        },
        "min": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "step": {
          "type": "number"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "input"
      ],
      "type": "object"
    },
    "Binding": {
      "anyOf": [
        {
          "$ref": "#/definitions/BindCheckbox"
        },
        {
          "$ref": "#/definitions/BindRadioSelect"
        },
        {
          "$ref": "#/definitions/BindRange"
        },
        {
          "$ref": "#/definitions/InputBinding"
        },
        {
          "$ref": "#/definitions/DirectBinding"
        }
      ]
    },
    "Blend": {
      "enum": [
        null,
        "multiply",
        "screen",
        "overlay",
        "darken",
        "lighten",
        "color-dodge",
        "color-burn",
        "hard-light",
        "soft-light",
        "difference",
        "exclusion",
        "hue",
        "saturation",
        "color",
        "luminosity"
      ],
      "type": [
        "null",
        "string"
      ]
    },
    "BooleanValue": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/BooleanValueRef"
        }
      ]
    },
    "BooleanValueRef": {
      "$ref": "#/definitions/ScaledValueRef<boolean>"
    },
    "Categorical": {
      "enum": [
        "accent",
        "category10",
        "category20",
        "category20b",
        "category20c",
        "dark2",
        "paired",
        "pastel1",
        "pastel2",
        "set1",
        "set2",
        "set3",
        "tableau10",
        "tableau20"
      ],
      "type": "string"
    },
    "Clip": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "additionalProperties": false,
          "properties": {
            "path": {
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "sphere": {
              "type": "string"
            }
          },
          "required": [
            "sphere"
          ],
          "type": "object"
        }
      ]
    },
    "CollectTransform": {
      "additionalProperties": false,
      "properties": {
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "type": {
          "const": "collect",
          "type": "string"
        }
      },
      "required": [
        "type",
        "sort"
      ],
      "type": "object"
    },
    "Color": {
      "anyOf": [
        {
          "$ref": "#/definitions/ColorName"
        },
        {
          "$ref": "#/definitions/HexColor"
        },
        {
          "type": "string"
        }
      ]
    },
    "ColorHCL": {
      "additionalProperties": false,
      "properties": {
        "c": {
          "$ref": "#/definitions/NumericValueRef"
        },
        "h": {
          "$ref": "#/definitions/NumericValueRef"
        },
        "l": {
          "$ref": "#/definitions/NumericValueRef"
        }
      },
      "required": [
        "h",
        "c",
        "l"
      ],
      "type": "object"
    },
    "ColorHSL": {
      "additionalProperties": false,
      "properties": {
        "h": {
          "$ref": "#/definitions/NumericValueRef"
        },
        "l": {
          "$ref": "#/definitions/NumericValueRef"
        },
        "s": {
          "$ref": "#/definitions/NumericValueRef"
        }
      },
      "required": [
        "h",
        "s",
        "l"
      ],
      "type": "object"
    },
    "ColorLAB": {
      "additionalProperties": false,
      "properties": {
        "a": {
          "$ref": "#/definitions/NumericValueRef"
        },
        "b": {
          "$ref": "#/definitions/NumericValueRef"
        },
        "l": {
          "$ref": "#/definitions/NumericValueRef"
        }
      },
      "required": [
        "l",
        "a",
        "b"
      ],
      "type": "object"
    },
    "ColorName": {
      "enum": [
        "black",
        "silver",
        "gray",
        "white",
        "maroon",
        "red",
        "purple",
        "fuchsia",
        "green",
        "lime",
        "olive",
        "yellow",
        "navy",
        "blue",
        "teal",
        "aqua",
        "orange",
        "aliceblue",
        "antiquewhite",
        "aquamarine",
        "azure",
        "beige",
        "bisque",
        "blanchedalmond",
        "blueviolet",
        "brown",
        "burlywood",
        "cadetblue",
        "chartreuse",
        "chocolate",
        "coral",
        "cornflowerblue",
        "cornsilk",
        "crimson",
        "cyan",
        "darkblue",
        "darkcyan",
        "darkgoldenrod",
        "darkgray",
        "darkgreen",
        "darkgrey",
        "darkkhaki",
        "darkmagenta",
        "darkolivegreen",
        "darkorange",
        "darkorchid",
        "darkred",
        "darksalmon",
        "darkseagreen",
        "darkslateblue",
        "darkslategray",
        "darkslategrey",
        "darkturquoise",
        "darkviolet",
        "deeppink",
        "deepskyblue",
        "dimgray",
        "dimgrey",
        "dodgerblue",
        "firebrick",
        "floralwhite",
        "forestgreen",
        "gainsboro",
        "ghostwhite",
        "gold",
        "goldenrod",
        "greenyellow",
        "grey",
        "honeydew",
        "hotpink",
        "indianred",
        "indigo",
        "ivory",
        "khaki",
        "lavender",
        "lavenderblush",
        "lawngreen",
        "lemonchiffon",
        "lightblue",
        "lightcoral",
        "lightcyan",
        "lightgoldenrodyellow",
        "lightgray",
        "lightgreen",
        "lightgrey",
        "lightpink",
        "lightsalmon",
        "lightseagreen",
        "lightskyblue",
        "lightslategray",
        "lightslategrey",
        "lightsteelblue",
        "lightyellow",
        "limegreen",
        "linen",
        "magenta",
        "mediumaquamarine",
        "mediumblue",
        "mediumorchid",
        "mediumpurple",
        "mediumseagreen",
        "mediumslateblue",
        "mediumspringgreen",
        "mediumturquoise",
        "mediumvioletred",
        "midnightblue",
        "mintcream",
        "mistyrose",
        "moccasin",
        "navajowhite",
        "oldlace",
        "olivedrab",
        "orangered",
        "orchid",
        "palegoldenrod",
        "palegreen",
        "paleturquoise",
        "palevioletred",
        "papayawhip",
        "peachpuff",
        "peru",
        "pink",
        "plum",
        "powderblue",
        "rosybrown",
        "royalblue",
        "saddlebrown",
        "salmon",
        "sandybrown",
        "seagreen",
        "seashell",
        "sienna",
        "skyblue",
        "slateblue",
        "slategray",
        "slategrey",
        "snow",
        "springgreen",
        "steelblue",
        "tan",
        "thistle",
        "tomato",
        "turquoise",
        "violet",
        "wheat",
        "whitesmoke",
        "yellowgreen",
        "rebeccapurple"
      ],
      "type": "string"
    },
    "ColorRGB": {
      "additionalProperties": false,
      "properties": {
        "b": {
          "$ref": "#/definitions/NumericValueRef"
        },
        "g": {
          "$ref": "#/definitions/NumericValueRef"
        },
        "r": {
          "$ref": "#/definitions/NumericValueRef"
        }
      },
      "required": [
        "r",
        "g",
        "b"
      ],
      "type": "object"
    },
    "ColorScheme": {
      "anyOf": [
        {
          "$ref": "#/definitions/Categorical"
        },
        {
          "$ref": "#/definitions/SequentialSingleHue"
        },
        {
          "$ref": "#/definitions/SequentialMultiHue"
        },
        {
          "$ref": "#/definitions/Diverging"
        },
        {
          "$ref": "#/definitions/Cyclical"
        }
      ]
    },
    "ColorValue": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "$ref": "#/definitions/Color"
        },
        {
          "$ref": "#/definitions/ColorValueRef"
        }
      ]
    },
    "ColorValueRef": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<Color>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "anyOf": [
                {
                  "$ref": "#/definitions/LinearGradient"
                },
                {
                  "$ref": "#/definitions/RadialGradient"
                }
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "count": {
              "type": "number"
            },
            "gradient": {
              "$ref": "#/definitions/Field"
            },
            "start": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "stop": {
              "items": {
                "type": "number"
              },
              "type": "array"
            }
          },
          "required": [
            "gradient"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "color": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ColorRGB"
                },
                {
                  "$ref": "#/definitions/ColorHSL"
                },
                {
                  "$ref": "#/definitions/ColorLAB"
                },
                {
                  "$ref": "#/definitions/ColorHCL"
                }
              ]
            }
          },
          "required": [
            "color"
          ],
          "type": "object"
        }
      ]
    },
    "Compare": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/ExprRef"
                }
              ]
            },
            "order": {
              "$ref": "#/definitions/SortOrder"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/ExprRef"
                  }
                ]
              },
              "type": "array"
            },
            "order": {
              "items": {
                "$ref": "#/definitions/SortOrder"
              },
              "type": "array"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ]
    },
    "Config": {
      "additionalProperties": false,
      "properties": {
        "arc": {
          "$ref": "#/definitions/MarkConfig"
        },
        "area": {
          "$ref": "#/definitions/MarkConfig"
        },
        "autosize": {
          "$ref": "#/definitions/AutoSize"
        },
        "axis": {
          "$ref": "#/definitions/AxisConfig"
        },
        "axisBand": {
          "$ref": "#/definitions/AxisConfig"
        },
        "axisBottom": {
          "$ref": "#/definitions/AxisConfig"
        },
        "axisLeft": {
          "$ref": "#/definitions/AxisConfig"
        },
        "axisRight": {
          "$ref": "#/definitions/AxisConfig"
        },
        "axisTop": {
          "$ref": "#/definitions/AxisConfig"
        },
        "axisX": {
          "$ref": "#/definitions/AxisConfig"
        },
        "axisY": {
          "$ref": "#/definitions/AxisConfig"
        },
        "background": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ]
        },
        "events": {
          "additionalProperties": false,
          "properties": {
            "bind": {
              "enum": [
                "any",
                "container",
                "none"
              ],
              "type": "string"
            },
            "defaults": {
              "$ref": "#/definitions/DefaultsConfig"
            },
            "globalCursor": {
              "type": "boolean"
            },
            "selector": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ]
            },
            "timer": {
              "type": "boolean"
            },
            "view": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ]
            },
            "window": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ]
            }
          },
          "type": "object"
        },
        "group": {
        },
        "image": {
          "$ref": "#/definitions/MarkConfig"
        },
        "legend": {
          "$ref": "#/definitions/LegendConfig"
        },
        "line": {
          "$ref": "#/definitions/MarkConfig"
        },
        "lineBreak": {
          "description": "A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property provides a global default for text marks, which is overridden by mark or style config settings, and by the \"lineBreak\" mark encoding channel. If signal-valued, either string or regular expression (regexp) values are valid.",
          "type": "string"
        },
        "locale": {
          "$ref": "#/definitions/Locale"
        },
        "mark": {
          "$ref": "#/definitions/MarkConfig"
        },
        "padding": {
          "$ref": "#/definitions/Padding"
        },
        "path": {
          "$ref": "#/definitions/MarkConfig"
        },
        "projection": {
          "$ref": "#/definitions/ProjectionConfig"
        },
        "range": {
          "$ref": "#/definitions/RangeConfig"
        },
        "rect": {
          "$ref": "#/definitions/MarkConfig"
        },
        "rule": {
          "$ref": "#/definitions/MarkConfig"
        },
        "shape": {
          "$ref": "#/definitions/MarkConfig"
        },
        "signals": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/InitSignal"
              },
              {
                "$ref": "#/definitions/NewSignal"
              }
            ]
          },
          "type": "array"
        },
        "style": {
          "additionalProperties": {
            "$ref": "#/definitions/MarkConfig"
          },
          "type": "object"
        },
        "symbol": {
          "$ref": "#/definitions/MarkConfig"
        },
        "text": {
          "$ref": "#/definitions/MarkConfig"
        },
        "title": {
          "$ref": "#/definitions/TitleConfig"
        },
        "trail": {
          "$ref": "#/definitions/MarkConfig"
        }
      },
      "type": "object"
    },
    "ContourTransform": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "bandwidth": {
              "type": "number"
            },
            "cellSize": {
              "type": "number"
            },
            "count": {
              "type": "number"
            },
            "nice": {
              "type": "number"
            },
            "signal": {
              "type": "string"
            },
            "size": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": {
              "const": "contour",
              "type": "string"
            },
            "values": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "x": {
              "$ref": "#/definitions/FieldRef"
            },
            "y": {
              "$ref": "#/definitions/FieldRef"
            }
          },
          "required": [
            "size",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "bandwidth": {
              "type": "number"
            },
            "cellSize": {
              "type": "number"
            },
            "signal": {
              "type": "string"
            },
            "size": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "thresholds": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": {
              "const": "contour",
              "type": "string"
            },
            "values": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "x": {
              "$ref": "#/definitions/FieldRef"
            },
            "y": {
              "$ref": "#/definitions/FieldRef"
            }
          },
          "required": [
            "size",
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "CountPatternTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "case": {
          "type": "string"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "pattern": {
          "type": "string"
        },
        "stopwords": {
          "type": "string"
        },
        "type": {
          "const": "countpattern",
          "type": "string"
        }
      },
      "required": [
        "type",
        "field"
      ],
      "type": "object"
    },
    "CrossFilterTransform": {
      "additionalProperties": false,
      "properties": {
        "fields": {
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/TransformField"
              }
            ]
          },
          "type": "array"
        },
        "query": {
          "items": {
            "$ref": "#/definitions/Vector2<number>"
          },
          "type": "array"
        },
        "signal": {
          "$ref": "#/definitions/SignalName"
        },
        "type": {
          "const": "crossfilter",
          "type": "string"
        }
      },
      "required": [
        "type",
        "fields",
        "query"
      ],
      "type": "object"
    },
    "CrossTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "filter": {
          "$ref": "#/definitions/ExprString"
        },
        "type": {
          "const": "cross",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Cursor": {
      "enum": [
        "auto",
        "default",
        "none",
        "context-menu",
        "help",
        "pointer",
        "progress",
        "wait",
        "cell",
        "crosshair",
        "text",
        "vertical-text",
        "alias",
        "copy",
        "move",
        "no-drop",
        "not-allowed",
        "e-resize",
        "n-resize",
        "ne-resize",
        "nw-resize",
        "s-resize",
        "se-resize",
        "sw-resize",
        "w-resize",
        "ew-resize",
        "ns-resize",
        "nesw-resize",
        "nwse-resize",
        "col-resize",
        "row-resize",
        "all-scroll",
        "zoom-in",
        "zoom-out",
        "grab",
        "grabbing"
      ],
      "type": "string"
    },
    "Cyclical": {
      "enum": [
        "rainbow",
        "sinebow"
      ],
      "type": "string"
    },
    "DashArrayValue": {
      "anyOf": [
        {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        {
          "$ref": "#/definitions/ArrayValueRef"
        }
      ]
    },
    "Data": {
      "anyOf": [
        {
          "$ref": "#/definitions/SourceData"
        },
        {
          "$ref": "#/definitions/ValuesData"
        },
        {
          "$ref": "#/definitions/UrlData"
        },
        {
          "$ref": "#/definitions/BaseData"
        }
      ]
    },
    "DataName": {
      "type": "string"
    },
    "DataType": {
      "enum": [
        "boolean",
        "number",
        "date",
        "string"
      ],
      "type": "string"
    },
    "Datum": {
    },
    "DatumFieldRef": {
      "additionalProperties": false,
      "properties": {
        "datum": {
          "$ref": "#/definitions/Field"
        }
      },
      "required": [
        "datum"
      ],
      "type": "object"
    },
    "DefaultsConfig": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "prevent": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "items": {
                    "$ref": "#/definitions/EventType"
                  },
                  "type": "array"
                }
              ]
            }
          },
          "required": [
            "prevent"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "allow": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "items": {
                    "$ref": "#/definitions/EventType"
                  },
                  "type": "array"
                }
              ]
            }
          },
          "required": [
            "allow"
          ],
          "type": "object"
        }
      ],
      "description": "The defaults object should have a single property: either \"prevent\" (to indicate which events should have default behavior suppressed) or \"allow\" (to indicate only those events whose default behavior should be allowed)."
    },
    "DensityMethod": {
      "enum": [
        "pdf",
        "cdf"
      ],
      "type": "string"
    },
    "DensityTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "distribution": {
          "$ref": "#/definitions/Distribution"
        },
        "extent": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "maxsteps": {
          "type": "number"
        },
        "method": {
          "$ref": "#/definitions/DensityMethod"
        },
        "minsteps": {
          "type": "number"
        },
        "steps": {
          "type": "number"
        },
        "type": {
          "const": "density",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "DerivedStream": {
      "additionalProperties": false,
      "properties": {
        "between": {
          "items": {
            "$ref": "#/definitions/Stream"
          },
          "type": "array"
        },
        "consume": {
          "type": "boolean"
        },
        "debounce": {
          "type": "number"
        },
        "filter": {
          "anyOf": [
            {
              "$ref": "#/definitions/Expr"
            },
            {
              "items": {
                "$ref": "#/definitions/Expr"
              },
              "type": "array"
            }
          ]
        },
        "markname": {
          "type": "string"
        },
        "marktype": {
          "$ref": "#/definitions/MarkType"
        },
        "stream": {
          "$ref": "#/definitions/Stream"
        },
        "throttle": {
          "type": "number"
        }
      },
      "required": [
        "stream"
      ],
      "type": "object"
    },
    "DirectBinding": {
      "additionalProperties": false,
      "properties": {
        "debounce": {
          "type": "number"
        },
        "element": {
          "anyOf": [
            {
              "$ref": "#/definitions/Element"
            },
            {
              "additionalProperties": false,
              "type": "object"
            }
          ]
        },
        "event": {
          "type": "string"
        }
      },
      "required": [
        "element"
      ],
      "type": "object"
    },
    "Distribution": {
      "anyOf": [
        {
          "$ref": "#/definitions/DistributionNormal"
        },
        {
          "$ref": "#/definitions/DistributionLogNormal"
        },
        {
          "$ref": "#/definitions/DistributionUniform"
        },
        {
          "$ref": "#/definitions/DistributionKDE"
        },
        {
          "$ref": "#/definitions/DistributionMixture"
        }
      ]
    },
    "DistributionKDE": {
      "additionalProperties": false,
      "properties": {
        "bandwidth": {
          "type": "number"
        },
        "field": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "from": {
          "$ref": "#/definitions/DataName"
        },
        "function": {
          "const": "kde",
          "type": "string"
        }
      },
      "required": [
        "function",
        "field"
      ],
      "type": "object"
    },
    "DistributionLogNormal": {
      "additionalProperties": false,
      "properties": {
        "function": {
          "const": "lognormal",
          "type": "string"
        },
        "mean": {
          "type": "number"
        },
        "stdev": {
          "type": "number"
        }
      },
      "required": [
        "function"
      ],
      "type": "object"
    },
    "DistributionMixture": {
      "additionalProperties": false,
      "properties": {
        "distributions": {
          "items": {
            "$ref": "#/definitions/Distribution"
          },
          "type": "array"
        },
        "field": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "function": {
          "const": "mixture",
          "type": "string"
        },
        "weights": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "function",
        "field"
      ],
      "type": "object"
    },
    "DistributionNormal": {
      "additionalProperties": false,
      "properties": {
        "function": {
          "const": "normal",
          "type": "string"
        },
        "mean": {
          "type": "number"
        },
        "stdev": {
          "type": "number"
        }
      },
      "required": [
        "function"
      ],
      "type": "object"
    },
    "DistributionUniform": {
      "additionalProperties": false,
      "properties": {
        "function": {
          "const": "uniform",
          "type": "string"
        },
        "max": {
          "type": "number"
        },
        "min": {
          "type": "number"
        }
      },
      "required": [
        "function"
      ],
      "type": "object"
    },
    "Diverging": {
      "enum": [
        "blueorange",
        "blueorange-3",
        "blueorange-4",
        "blueorange-5",
        "blueorange-6",
        "blueorange-7",
        "blueorange-8",
        "blueorange-9",
        "blueorange-10",
        "blueorange-11",
        "brownbluegreen",
        "brownbluegreen-3",
        "brownbluegreen-4",
        "brownbluegreen-5",
        "brownbluegreen-6",
        "brownbluegreen-7",
        "brownbluegreen-8",
        "brownbluegreen-9",
        "brownbluegreen-10",
        "brownbluegreen-11",
        "purplegreen",
        "purplegreen-3",
        "purplegreen-4",
        "purplegreen-5",
        "purplegreen-6",
        "purplegreen-7",
        "purplegreen-8",
        "purplegreen-9",
        "purplegreen-10",
        "purplegreen-11",
        "pinkyellowgreen",
        "pinkyellowgreen-3",
        "pinkyellowgreen-4",
        "pinkyellowgreen-5",
        "pinkyellowgreen-6",
        "pinkyellowgreen-7",
        "pinkyellowgreen-8",
        "pinkyellowgreen-9",
        "pinkyellowgreen-10",
        "pinkyellowgreen-11",
        "purpleorange",
        "purpleorange-3",
        "purpleorange-4",
        "purpleorange-5",
        "purpleorange-6",
        "purpleorange-7",
        "purpleorange-8",
        "purpleorange-9",
        "purpleorange-10",
        "purpleorange-11",
        "redblue",
        "redblue-3",
        "redblue-4",
        "redblue-5",
        "redblue-6",
        "redblue-7",
        "redblue-8",
        "redblue-9",
        "redblue-10",
        "redblue-11",
        "redgrey",
        "redgrey-3",
        "redgrey-4",
        "redgrey-5",
        "redgrey-6",
        "redgrey-7",
        "redgrey-8",
        "redgrey-9",
        "redgrey-10",
        "redgrey-11",
        "redyellowblue",
        "redyellowblue-3",
        "redyellowblue-4",
        "redyellowblue-5",
        "redyellowblue-6",
        "redyellowblue-7",
        "redyellowblue-8",
        "redyellowblue-9",
        "redyellowblue-10",
        "redyellowblue-11",
        "redyellowgreen",
        "redyellowgreen-3",
        "redyellowgreen-4",
        "redyellowgreen-5",
        "redyellowgreen-6",
        "redyellowgreen-7",
        "redyellowgreen-8",
        "redyellowgreen-9",
        "redyellowgreen-10",
        "redyellowgreen-11",
        "spectral",
        "spectral-3",
        "spectral-4",
        "spectral-5",
        "spectral-6",
        "spectral-7",
        "spectral-8",
        "spectral-9",
        "spectral-10",
        "spectral-11"
      ],
      "type": "string"
    },
    "DotBinTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": "string"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "groupby": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "signal": {
          "$ref": "#/definitions/SignalName"
        },
        "smooth": {
          "type": "boolean"
        },
        "step": {
          "type": "number"
        },
        "type": {
          "const": "dotbin",
          "type": "string"
        }
      },
      "required": [
        "type",
        "field"
      ],
      "type": "object"
    },
    "Element": {
      "type": "string"
    },
    "Encode<ArcEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/ArcEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/ArcEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/ArcEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/ArcEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/ArcEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/ArcEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/ArcEncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<AreaEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/AreaEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/AreaEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/AreaEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/AreaEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/AreaEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/AreaEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/AreaEncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<EncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/EncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/EncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/EncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/EncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/EncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/EncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/EncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<GroupEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/GroupEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/GroupEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/GroupEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/GroupEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/GroupEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/GroupEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/GroupEncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<ImageEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/ImageEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/ImageEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/ImageEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/ImageEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/ImageEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/ImageEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/ImageEncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<LineEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/LineEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/LineEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/LineEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/LineEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/LineEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/LineEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/LineEncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<PathEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/PathEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/PathEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/PathEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/PathEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/PathEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/PathEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/PathEncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<RectEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/RectEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/RectEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/RectEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/RectEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/RectEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/RectEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/RectEncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<RuleEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/RuleEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/RuleEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/RuleEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/RuleEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/RuleEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/RuleEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/RuleEncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<ShapeEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/ShapeEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/ShapeEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/ShapeEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/ShapeEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/ShapeEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/ShapeEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/ShapeEncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<SymbolEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/SymbolEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/SymbolEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/SymbolEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/SymbolEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/SymbolEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/SymbolEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/SymbolEncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<TextEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/TextEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/TextEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/TextEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/TextEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/TextEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/TextEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/TextEncodeEntry"
        }
      },
      "type": "object"
    },
    "Encode<TrailEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/TrailEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/TrailEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/TrailEncodeEntry"
        },
        "leave": {
          "$ref": "#/definitions/TrailEncodeEntry"
        },
        "release": {
          "$ref": "#/definitions/TrailEncodeEntry"
        },
        "select": {
          "$ref": "#/definitions/TrailEncodeEntry"
        },
        "update": {
          "$ref": "#/definitions/TrailEncodeEntry"
        }
      },
      "type": "object"
    },
    "EncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "EventListener": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "type": "string"
            }
          },
          "required": [
            "scale"
          ],
          "type": "object"
        },
        {
          "$ref": "#/definitions/Stream"
        }
      ]
    },
    "EventSelector": {
      "type": "string"
    },
    "EventStream": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "between": {
              "items": {
                "$ref": "#/definitions/Stream"
              },
              "type": "array"
            },
            "consume": {
              "type": "boolean"
            },
            "debounce": {
              "type": "number"
            },
            "filter": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Expr"
                },
                {
                  "items": {
                    "$ref": "#/definitions/Expr"
                  },
                  "type": "array"
                }
              ]
            },
            "markname": {
              "type": "string"
            },
            "marktype": {
              "$ref": "#/definitions/MarkType"
            },
            "source": {
              "enum": [
                "view",
                "scope"
              ],
              "type": "string"
            },
            "throttle": {
              "type": "number"
            },
            "type": {
              "$ref": "#/definitions/EventType"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "between": {
              "items": {
                "$ref": "#/definitions/Stream"
              },
              "type": "array"
            },
            "consume": {
              "type": "boolean"
            },
            "debounce": {
              "type": "number"
            },
            "filter": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Expr"
                },
                {
                  "items": {
                    "$ref": "#/definitions/Expr"
                  },
                  "type": "array"
                }
              ]
            },
            "markname": {
              "type": "string"
            },
            "marktype": {
              "$ref": "#/definitions/MarkType"
            },
            "source": {
              "const": "window",
              "type": "string"
            },
            "throttle": {
              "type": "number"
            },
            "type": {
              "$ref": "#/definitions/WindowEventType"
            }
          },
          "required": [
            "source",
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "EventType": {
      "enum": [
        "click",
        "dblclick",
        "dragenter",
        "dragleave",
        "dragover",
        "keydown",
        "keypress",
        "keyup",
        "mousedown",
        "mousemove",
        "mouseout",
        "mouseover",
        "mouseup",
        "mousewheel",
        "timer",
        "touchend",
        "touchmove",
        "touchstart",
        "wheel"
      ],
      "type": "string"
    },
    "Events": {
      "anyOf": [
        {
          "$ref": "#/definitions/EventSelector"
        },
        {
          "$ref": "#/definitions/EventListener"
        }
      ]
    },
    "ExcludeMappedValueRef<BaseAxis>": {
      "additionalProperties": false,
      "description": "Config properties cannot be scaled or reference fields but they can reference signals.",
      "properties": {
        "aria": {
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG group, removing the axis from the ARIA accessibility tree.\n\n__Default value:__ `true`",
          "type": "boolean"
        },
        "bandPosition": {
          "description": "An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n\n __Default value:__ `0.5`",
          "type": "number"
        },
        "description": {
          "description": "A text description of this axis for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If the `aria` property is true, for SVG output the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute) will be set to this description. If the description is unspecified it will be automatically generated.",
          "type": "string"
        },
        "domain": {
          "description": "A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.\n\n__Default value:__ `true`",
          "type": "boolean"
        },
        "domainCap": {
          "$ref": "#/definitions/StrokeCap",
          "description": "The stroke cap for the domain line's ending style. One of `\"butt\"`, `\"round\"` or `\"square\"`.\n\n__Default value:__ `\"butt\"`"
        },
        "domainColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "Color of axis domain line.\n\n__Default value:__ `\"gray\"`."
        },
        "domainDash": {
          "description": "An array of alternating [stroke, space] lengths for dashed domain lines.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "domainDashOffset": {
          "description": "The pixel offset at which to start drawing with the domain dash array.",
          "type": "number"
        },
        "domainOpacity": {
          "description": "Opacity of the axis domain line.",
          "type": "number"
        },
        "domainWidth": {
          "description": "Stroke width of axis domain line\n\n__Default value:__ `1`",
          "type": "number"
        },
        "grid": {
          "description": "A boolean flag indicating if grid lines should be included as part of the axis.",
          "type": "boolean"
        },
        "gridCap": {
          "$ref": "#/definitions/StrokeCap",
          "description": "The stroke cap for grid lines' ending style. One of `\"butt\"`, `\"round\"` or `\"square\"`.\n\n__Default value:__ `\"butt\"`"
        },
        "gridColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "Color of gridlines.\n\n__Default value:__ `\"lightGray\"`."
        },
        "gridDash": {
          "description": "An array of alternating [stroke, space] lengths for dashed grid lines.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "gridDashOffset": {
          "description": "The pixel offset at which to start drawing with the grid dash array.",
          "type": "number"
        },
        "gridOpacity": {
          "description": "The stroke opacity of grid (value between [0,1])\n\n__Default value:__ `1`",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        },
        "gridWidth": {
          "description": "The grid width, in pixels.\n\n__Default value:__ `1`",
          "minimum": 0,
          "type": "number"
        },
        "labelAlign": {
          "$ref": "#/definitions/Align",
          "description": "Horizontal text alignment of axis tick labels, overriding the default setting for the current axis orientation."
        },
        "labelAngle": {
          "description": "The rotation angle of the axis labels.\n\n__Default value:__ `-90` for nominal and ordinal fields; `0` otherwise.",
          "maximum": 360,
          "minimum": -360,
          "type": "number"
        },
        "labelBaseline": {
          "$ref": "#/definitions/TextBaseline",
          "description": "Vertical text baseline of axis tick labels, overriding the default setting for the current axis orientation. One of `\"alphabetic\"` (default), `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"line-top\"`, or `\"line-bottom\"`. The `\"line-top\"` and `\"line-bottom\"` values operate similarly to `\"top\"` and `\"bottom\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."
        },
        "labelBound": {
          "description": "Indicates if labels should be hidden if they exceed the axis range. If `false` (the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.\n\n__Default value:__ `false`.",
          "type": [
            "number",
            "boolean"
          ]
        },
        "labelColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "The color of the tick label, can be in hex color code or regular color name."
        },
        "labelFlush": {
          "description": "Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.",
          "type": [
            "number",
            "boolean"
          ]
        },
        "labelFlushOffset": {
          "description": "Indicates the number of pixels by which to offset flush-adjusted labels. For example, a value of `2` will push flush-adjusted labels 2 pixels outward from the center of the axis. Offsets can help the labels better visually group with corresponding axis ticks.\n\n__Default value:__ `0`.",
          "type": "number"
        },
        "labelFont": {
          "description": "The font of the tick label.",
          "type": "string"
        },
        "labelFontSize": {
          "description": "The font size of the label, in pixels.",
          "minimum": 0,
          "type": "number"
        },
        "labelFontStyle": {
          "$ref": "#/definitions/FontStyle",
          "description": "Font style of the title."
        },
        "labelFontWeight": {
          "$ref": "#/definitions/FontWeight",
          "description": "Font weight of axis tick labels."
        },
        "labelLimit": {
          "description": "Maximum allowed pixel width of axis tick labels.\n\n__Default value:__ `180`",
          "type": "number"
        },
        "labelLineHeight": {
          "description": "Line height in pixels for multi-line label text or label text with `\"line-top\"` or `\"line-bottom\"` baseline.",
          "type": "number"
        },
        "labelOffset": {
          "description": "Position offset in pixels to apply to labels, in addition to tickOffset.\n\n__Default value:__ `0`",
          "type": "number"
        },
        "labelOpacity": {
          "description": "The opacity of the labels.",
          "type": "number"
        },
        "labelOverlap": {
          "$ref": "#/definitions/LabelOverlap",
          "description": "The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes)."
        },
        "labelPadding": {
          "description": "The padding in pixels between labels and ticks.\n\n__Default value:__ `2`",
          "type": "number"
        },
        "labelSeparation": {
          "description": "The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.",
          "type": "number"
        },
        "labels": {
          "description": "A boolean flag indicating if labels should be included as part of the axis.\n\n__Default value:__ `true`.",
          "type": "boolean"
        },
        "maxExtent": {
          "description": "The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.\n\n__Default value:__ `undefined`.",
          "type": "number"
        },
        "minExtent": {
          "description": "The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.\n\n__Default value:__ `30` for y-axis; `undefined` for x-axis.",
          "type": "number"
        },
        "tickBand": {
          "description": "For band scales, indicates if ticks and grid lines should be placed at the `\"center\"` of a band (default) or at the band `\"extent\"`s to indicate intervals",
          "enum": [
            "center",
            "extent"
          ],
          "type": "string"
        },
        "tickCap": {
          "$ref": "#/definitions/StrokeCap",
          "description": "The stroke cap for the tick lines' ending style. One of `\"butt\"`, `\"round\"` or `\"square\"`.\n\n__Default value:__ `\"butt\"`"
        },
        "tickColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "The color of the axis's tick.\n\n__Default value:__ `\"gray\"`"
        },
        "tickDash": {
          "description": "An array of alternating [stroke, space] lengths for dashed tick mark lines.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "tickDashOffset": {
          "description": "The pixel offset at which to start drawing with the tick mark dash array.",
          "type": "number"
        },
        "tickExtra": {
          "description": "Boolean flag indicating if an extra axis tick should be added for the initial position of the axis. This flag is useful for styling axes for `band` scales such that ticks are placed on band boundaries rather in the middle of a band. Use in conjunction with `\"bandPosition\": 1` and an axis `\"padding\"` value of `0`.",
          "type": "boolean"
        },
        "tickOffset": {
          "description": "Position offset in pixels to apply to ticks, labels, and gridlines.",
          "type": "number"
        },
        "tickOpacity": {
          "description": "Opacity of the ticks.",
          "type": "number"
        },
        "tickRound": {
          "description": "Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n\n__Default value:__ `true`",
          "type": "boolean"
        },
        "tickSize": {
          "description": "The size in pixels of axis ticks.\n\n__Default value:__ `5`",
          "minimum": 0,
          "type": "number"
        },
        "tickWidth": {
          "description": "The width, in pixels, of ticks.\n\n__Default value:__ `1`",
          "minimum": 0,
          "type": "number"
        },
        "ticks": {
          "description": "Boolean value that determines whether the axis should include ticks.\n\n__Default value:__ `true`",
          "type": "boolean"
        },
        "titleAlign": {
          "$ref": "#/definitions/Align",
          "description": "Horizontal text alignment of axis titles."
        },
        "titleAnchor": {
          "$ref": "#/definitions/TitleAnchor",
          "description": "Text anchor position for placing axis titles."
        },
        "titleAngle": {
          "description": "Angle in degrees of axis titles.",
          "type": "number"
        },
        "titleBaseline": {
          "$ref": "#/definitions/TextBaseline",
          "description": "Vertical text baseline for axis titles. One of `\"alphabetic\"` (default), `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"line-top\"`, or `\"line-bottom\"`. The `\"line-top\"` and `\"line-bottom\"` values operate similarly to `\"top\"` and `\"bottom\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."
        },
        "titleColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "Color of the title, can be in hex color code or regular color name."
        },
        "titleFont": {
          "description": "Font of the title. (e.g., `\"Helvetica Neue\"`).",
          "type": "string"
        },
        "titleFontSize": {
          "description": "Font size of the title.",
          "minimum": 0,
          "type": "number"
        },
        "titleFontStyle": {
          "$ref": "#/definitions/FontStyle",
          "description": "Font style of the title."
        },
        "titleFontWeight": {
          "$ref": "#/definitions/FontWeight",
          "description": "Font weight of the title. This can be either a string (e.g `\"bold\"`, `\"normal\"`) or a number (`100`, `200`, `300`, ..., `900` where `\"normal\"` = `400` and `\"bold\"` = `700`)."
        },
        "titleLimit": {
          "description": "Maximum allowed pixel width of axis titles.",
          "minimum": 0,
          "type": "number"
        },
        "titleLineHeight": {
          "description": "Line height in pixels for multi-line title text or title text with `\"line-top\"` or `\"line-bottom\"` baseline.",
          "type": "number"
        },
        "titleOpacity": {
          "description": "Opacity of the axis title.",
          "type": "number"
        },
        "titlePadding": {
          "description": "The padding, in pixels, between title and axis.",
          "type": "number"
        },
        "titleX": {
          "description": "X-coordinate of the axis title relative to the axis group.",
          "type": "number"
        },
        "titleY": {
          "description": "Y-coordinate of the axis title relative to the axis group.",
          "type": "number"
        },
        "translate": {
          "description": "Coordinate space translation offset for axis layout. By default, axes are translated by a 0.5 pixel offset for both the x and y coordinates in order to align stroked lines with the pixel grid. However, for vector graphics output these pixel-specific adjustments may be undesirable, in which case translate can be changed (for example, to zero).\n\n__Default value:__ `0.5`",
          "type": "number"
        },
        "zindex": {
          "description": "The integer z-index indicating the layering of the axis group relative to other axis, mark, and legend groups.",
          "minimum": 0,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ExcludeMappedValueRef<BaseProjection>": {
      "additionalProperties": false,
      "description": "Config properties cannot be scaled or reference fields but they can reference signals.",
      "properties": {
        "center": {
          "$ref": "#/definitions/Vector2<number>",
          "description": "The projection's center, a two-element array of longitude and latitude in degrees.\n\n__Default value:__ `[0, 0]`"
        },
        "clipAngle": {
          "description": "The projection's clipping circle radius to the specified angle in degrees. If `null`, switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than small-circle clipping.",
          "type": "number"
        },
        "clipExtent": {
          "$ref": "#/definitions/Vector2<Vector2<number>>",
          "description": "The projection's viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no viewport clipping is performed."
        },
        "coefficient": {
          "type": "number"
        },
        "distance": {
          "type": "number"
        },
        "extent": {
          "$ref": "#/definitions/Vector2<Vector2<number>>"
        },
        "fit": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/definitions/GeoJsonFeature"
              },
              "type": "array"
            },
            {
              "items": {
                "$ref": "#/definitions/Fit"
              },
              "type": "array"
            }
          ]
        },
        "fraction": {
          "type": "number"
        },
        "lobes": {
          "type": "number"
        },
        "parallel": {
          "type": "number"
        },
        "parallels": {
          "description": "For conic projections, the [two standard parallels](https://en.wikipedia.org/wiki/Map_projection#Conic) that define the map layout. The default depends on the specific conic projection used.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "pointRadius": {
          "description": "The default radius (in pixels) to use when drawing GeoJSON `Point` and `MultiPoint` geometries. This parameter sets a constant default value. To modify the point radius in response to data, see the corresponding parameter of the GeoPath and GeoShape transforms.\n\n__Default value:__ `4.5`",
          "type": "number"
        },
        "precision": {
          "description": "The threshold for the projection's [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection's current resampling precision which defaults to `√0.5 ≅ 0.70710…`.",
          "type": "number"
        },
        "radius": {
          "type": "number"
        },
        "ratio": {
          "type": "number"
        },
        "reflectX": {
          "type": "boolean"
        },
        "reflectY": {
          "type": "boolean"
        },
        "rotate": {
          "anyOf": [
            {
              "$ref": "#/definitions/Vector2<number>"
            },
            {
              "$ref": "#/definitions/Vector3<number>"
            }
          ],
          "description": "The projection's three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)\n\n__Default value:__ `[0, 0, 0]`"
        },
        "scale": {
          "description": "The projection’s scale factor. The default scale is projection-specific. The scale factor corresponds linearly to the distance between projected points; however, scale factor values are not equivalent across projections.",
          "type": "number"
        },
        "size": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "spacing": {
          "type": "number"
        },
        "tilt": {
          "type": "number"
        },
        "translate": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "type": {
          "$ref": "#/definitions/ProjectionType"
        }
      },
      "type": "object"
    },
    "ExcludeMappedValueRef<BaseTitle>": {
      "additionalProperties": false,
      "description": "Config properties cannot be scaled or reference fields but they can reference signals.",
      "properties": {
        "align": {
          "$ref": "#/definitions/Align",
          "description": "Horizontal text alignment for title text. One of `\"left\"`, `\"center\"`, or `\"right\"`."
        },
        "anchor": {
          "$ref": "#/definitions/TitleAnchor",
          "description": "The anchor position for placing the title and subtitle text. One of `\"start\"`, `\"middle\"`, or `\"end\"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title."
        },
        "angle": {
          "description": "Angle in degrees of title and subtitle text.",
          "type": "number"
        },
        "aria": {
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG group, removing the title from the ARIA accessibility tree.\n\n__Default value:__ `true`",
          "type": "boolean"
        },
        "baseline": {
          "$ref": "#/definitions/TextBaseline",
          "description": "Vertical text baseline for title and subtitle text. One of `\"alphabetic\"` (default), `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"line-top\"`, or `\"line-bottom\"`. The `\"line-top\"` and `\"line-bottom\"` values operate similarly to `\"top\"` and `\"bottom\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."
        },
        "color": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "Text color for title text."
        },
        "dx": {
          "description": "Delta offset for title and subtitle text x-coordinate.",
          "type": "number"
        },
        "dy": {
          "description": "Delta offset for title and subtitle text y-coordinate.",
          "type": "number"
        },
        "font": {
          "description": "Font name for title text.",
          "type": "string"
        },
        "fontSize": {
          "description": "Font size in pixels for title text.",
          "minimum": 0,
          "type": "number"
        },
        "fontStyle": {
          "$ref": "#/definitions/FontStyle",
          "description": "Font style for title text."
        },
        "fontWeight": {
          "$ref": "#/definitions/FontWeight",
          "description": "Font weight for title text. This can be either a string (e.g `\"bold\"`, `\"normal\"`) or a number (`100`, `200`, `300`, ..., `900` where `\"normal\"` = `400` and `\"bold\"` = `700`)."
        },
        "frame": {
          "anyOf": [
            {
              "$ref": "#/definitions/TitleFrame"
            },
            {
              "type": "string"
            }
          ],
          "description": "The reference frame for the anchor position, one of `\"bounds\"` (to anchor relative to the full bounding box) or `\"group\"` (to anchor relative to the group width or height)."
        },
        "limit": {
          "description": "The maximum allowed length in pixels of title and subtitle text.",
          "minimum": 0,
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height in pixels for multi-line title text or title text with `\"line-top\"` or `\"line-bottom\"` baseline.",
          "type": "number"
        },
        "offset": {
          "description": "The orthogonal offset in pixels by which to displace the title group from its position along the edge of the chart.",
          "type": "number"
        },
        "orient": {
          "$ref": "#/definitions/TitleOrient",
          "description": "Default title orientation (`\"top\"`, `\"bottom\"`, `\"left\"`, or `\"right\"`)"
        },
        "subtitleColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "Text color for subtitle text."
        },
        "subtitleFont": {
          "description": "Font name for subtitle text.",
          "type": "string"
        },
        "subtitleFontSize": {
          "description": "Font size in pixels for subtitle text.",
          "minimum": 0,
          "type": "number"
        },
        "subtitleFontStyle": {
          "$ref": "#/definitions/FontStyle",
          "description": "Font style for subtitle text."
        },
        "subtitleFontWeight": {
          "$ref": "#/definitions/FontWeight",
          "description": "Font weight for subtitle text. This can be either a string (e.g `\"bold\"`, `\"normal\"`) or a number (`100`, `200`, `300`, ..., `900` where `\"normal\"` = `400` and `\"bold\"` = `700`)."
        },
        "subtitleLineHeight": {
          "description": "Line height in pixels for multi-line subtitle text.",
          "type": "number"
        },
        "subtitlePadding": {
          "description": "The padding in pixels between title and subtitle text.",
          "type": "number"
        },
        "zindex": {
          "description": "The integer z-index indicating the layering of the title group relative to other axis, mark, and legend groups.\n\n__Default value:__ `0`.",
          "minimum": 0,
          "type": "number"
        }
      },
      "type": "object"
    },
    "Expr": {
      "type": "string"
    },
    "ExprRef": {
      "additionalProperties": false,
      "properties": {
        "expr": {
          "$ref": "#/definitions/Expr"
        }
      },
      "required": [
        "expr"
      ],
      "type": "object"
    },
    "ExprString": {
      "type": "string"
    },
    "ExtentTransform": {
      "additionalProperties": false,
      "properties": {
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "signal": {
          "type": "string"
        },
        "type": {
          "const": "extent",
          "type": "string"
        }
      },
      "required": [
        "type",
        "field"
      ],
      "type": "object"
    },
    "Facet": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "data": {
              "type": "string"
            },
            "field": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "data",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "aggregate": {
              "additionalProperties": false,
              "properties": {
                "as": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "cross": {
                  "type": "boolean"
                },
                "fields": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "ops": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "fields",
                "ops",
                "as"
              ],
              "type": "object"
            },
            "data": {
              "type": "string"
            },
            "groupby": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ]
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "data",
            "groupby"
          ],
          "type": "object"
        }
      ]
    },
    "Field": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/DatumFieldRef"
        },
        {
          "$ref": "#/definitions/GroupFieldRef"
        },
        {
          "$ref": "#/definitions/ParentFieldRef"
        }
      ]
    },
    "FieldParam": {
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string"
        }
      },
      "required": [
        "field"
      ],
      "type": "object"
    },
    "FieldRef": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/TransformField"
        }
      ]
    },
    "FilterTransform": {
      "additionalProperties": false,
      "properties": {
        "expr": {
          "$ref": "#/definitions/ExprString"
        },
        "type": {
          "const": "filter",
          "type": "string"
        }
      },
      "required": [
        "type",
        "expr"
      ],
      "type": "object"
    },
    "Fit": {
      "anyOf": [
        {
          "$ref": "#/definitions/GeoJsonFeature"
        },
        {
          "$ref": "#/definitions/GeoJsonFeatureCollection"
        },
        {
          "items": {
            "$ref": "#/definitions/GeoJsonFeature"
          },
          "type": "array"
        }
      ]
    },
    "FlattenTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fields": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "index": {
          "type": "string"
        },
        "type": {
          "const": "flatten",
          "type": "string"
        }
      },
      "required": [
        "type",
        "fields"
      ],
      "type": "object"
    },
    "FoldTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "fields": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "type": {
          "const": "fold",
          "type": "string"
        }
      },
      "required": [
        "type",
        "fields"
      ],
      "type": "object"
    },
    "FontStyle": {
      "type": "string"
    },
    "FontStyleValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/FontStyle"
        },
        {
          "$ref": "#/definitions/FontStyleValueRef"
        }
      ]
    },
    "FontStyleValueRef": {
      "$ref": "#/definitions/ScaledValueRef<FontStyle>"
    },
    "FontWeight": {
      "enum": [
        "normal",
        "bold",
        "lighter",
        "bolder",
        100,
        200,
        300,
        400,
        500,
        600,
        700,
        800,
        900
      ],
      "type": [
        "string",
        "number"
      ]
    },
    "FontWeightValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/FontWeight"
        },
        {
          "$ref": "#/definitions/FontWeightValueRef"
        }
      ]
    },
    "FontWeightValueRef": {
      "$ref": "#/definitions/ScaledValueRef<FontWeight>"
    },
    "Force": {
      "anyOf": [
        {
          "$ref": "#/definitions/ForceCenter"
        },
        {
          "$ref": "#/definitions/ForceCollide"
        },
        {
          "$ref": "#/definitions/ForceLink"
        },
        {
          "$ref": "#/definitions/ForceNBody"
        },
        {
          "$ref": "#/definitions/ForceX"
        },
        {
          "$ref": "#/definitions/ForceY"
        }
      ]
    },
    "ForceCenter": {
      "additionalProperties": false,
      "properties": {
        "force": {
          "const": "center",
          "type": "string"
        },
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        }
      },
      "required": [
        "force"
      ],
      "type": "object"
    },
    "ForceCollide": {
      "additionalProperties": false,
      "properties": {
        "force": {
          "const": "collide",
          "type": "string"
        },
        "iterations": {
          "type": "number"
        },
        "radius": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/ExprRef"
            }
          ]
        },
        "strength": {
          "type": "number"
        }
      },
      "required": [
        "force"
      ],
      "type": "object"
    },
    "ForceLink": {
      "additionalProperties": false,
      "properties": {
        "distance": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/ExprRef"
            }
          ]
        },
        "force": {
          "const": "link",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/FieldRef"
        },
        "iterations": {
          "type": "number"
        },
        "links": {
          "$ref": "#/definitions/DataName"
        },
        "strength": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/ExprRef"
            }
          ]
        }
      },
      "required": [
        "force"
      ],
      "type": "object"
    },
    "ForceNBody": {
      "additionalProperties": false,
      "properties": {
        "distanceMax": {
          "type": "number"
        },
        "distanceMin": {
          "type": "number"
        },
        "force": {
          "const": "nbody",
          "type": "string"
        },
        "strength": {
          "type": "number"
        },
        "theta": {
          "type": "number"
        }
      },
      "required": [
        "force"
      ],
      "type": "object"
    },
    "ForceTransform": {
      "additionalProperties": false,
      "properties": {
        "alpha": {
          "type": "number"
        },
        "alphaMin": {
          "type": "number"
        },
        "alphaTarget": {
          "type": "number"
        },
        "forces": {
          "items": {
            "$ref": "#/definitions/Force"
          },
          "type": "array"
        },
        "iterations": {
          "type": "number"
        },
        "restart": {
          "type": "boolean"
        },
        "signal": {
          "$ref": "#/definitions/SignalName"
        },
        "static": {
          "type": "boolean"
        },
        "type": {
          "const": "force",
          "type": "string"
        },
        "velocityDecay": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "ForceX": {
      "additionalProperties": false,
      "properties": {
        "force": {
          "const": "x",
          "type": "string"
        },
        "strength": {
          "type": "number"
        },
        "x": {
          "$ref": "#/definitions/FieldRef"
        }
      },
      "required": [
        "force"
      ],
      "type": "object"
    },
    "ForceY": {
      "additionalProperties": false,
      "properties": {
        "force": {
          "const": "y",
          "type": "string"
        },
        "strength": {
          "type": "number"
        },
        "y": {
          "$ref": "#/definitions/FieldRef"
        }
      },
      "required": [
        "force"
      ],
      "type": "object"
    },
    "Format": {
      "anyOf": [
        {
          "$ref": "#/definitions/FormatJSON"
        },
        {
          "$ref": "#/definitions/FormatSV"
        },
        {
          "$ref": "#/definitions/FormatDSV"
        },
        {
          "$ref": "#/definitions/FormatTopoJSON"
        },
        {
          "additionalProperties": false,
          "properties": {
            "parse": {
              "$ref": "#/definitions/Parse"
            }
          },
          "required": [
            "parse"
          ],
          "type": "object"
        }
      ]
    },
    "FormatDSV": {
      "additionalProperties": false,
      "properties": {
        "delimiter": {
          "type": "string"
        },
        "header": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parse": {
          "$ref": "#/definitions/Parse"
        },
        "type": {
          "const": "dsv",
          "type": "string"
        }
      },
      "required": [
        "type",
        "delimiter"
      ],
      "type": "object"
    },
    "FormatJSON": {
      "additionalProperties": false,
      "properties": {
        "copy": {
          "type": "boolean"
        },
        "parse": {
          "$ref": "#/definitions/Parse"
        },
        "property": {
          "type": "string"
        },
        "type": {
          "const": "json",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "FormatSV": {
      "additionalProperties": false,
      "properties": {
        "header": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parse": {
          "$ref": "#/definitions/Parse"
        },
        "type": {
          "enum": [
            "csv",
            "tsv"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "FormatTopoJSON": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "feature": {
              "type": "string"
            },
            "property": {
              "type": "string"
            },
            "type": {
              "const": "topojson",
              "type": "string"
            }
          },
          "required": [
            "feature",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "filter": {
              "enum": [
                "interior",
                "exterior",
                null
              ],
              "type": [
                "string",
                "null"
              ]
            },
            "mesh": {
              "type": "string"
            },
            "property": {
              "type": "string"
            },
            "type": {
              "const": "topojson",
              "type": "string"
            }
          },
          "required": [
            "filter",
            "mesh",
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "FormatType": {
      "enum": [
        "number",
        "time",
        "utc"
      ],
      "type": "string"
    },
    "FormulaTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": "string"
        },
        "expr": {
          "$ref": "#/definitions/ExprString"
        },
        "initonly": {
          "type": "boolean"
        },
        "type": {
          "const": "formula",
          "type": "string"
        }
      },
      "required": [
        "type",
        "expr",
        "as"
      ],
      "type": "object"
    },
    "From": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FromFacet": {
      "anyOf": [
        {
          "$ref": "#/definitions/From"
        },
        {
          "additionalProperties": false,
          "properties": {
            "data": {
              "type": "string"
            },
            "facet": {
              "$ref": "#/definitions/Facet"
            }
          },
          "required": [
            "facet"
          ],
          "type": "object"
        }
      ]
    },
    "GeoJSONTransform": {
      "additionalProperties": false,
      "properties": {
        "fields": {
          "$ref": "#/definitions/Vector2<FieldRef>"
        },
        "geojson": {
          "$ref": "#/definitions/FieldRef"
        },
        "signal": {
          "$ref": "#/definitions/SignalName"
        },
        "type": {
          "const": "geojson",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "GeoJsonFeature": {
    },
    "GeoJsonFeatureCollection": {
    },
    "GeoPathTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": "string"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "pointRadius": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/ExprRef"
            }
          ]
        },
        "projection": {
          "$ref": "#/definitions/ProjectionName"
        },
        "type": {
          "const": "geopath",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "GeoPointTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "fields": {
          "$ref": "#/definitions/Vector2<FieldRef>"
        },
        "projection": {
          "$ref": "#/definitions/ProjectionName"
        },
        "type": {
          "const": "geopoint",
          "type": "string"
        }
      },
      "required": [
        "type",
        "projection",
        "fields"
      ],
      "type": "object"
    },
    "GeoShapeTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": "string"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "pointRadius": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/ExprRef"
            }
          ]
        },
        "projection": {
          "$ref": "#/definitions/ProjectionName"
        },
        "type": {
          "const": "geoshape",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Gradient": {
      "anyOf": [
        {
          "$ref": "#/definitions/LinearGradient"
        },
        {
          "$ref": "#/definitions/RadialGradient"
        }
      ]
    },
    "GradientStop": {
      "additionalProperties": false,
      "properties": {
        "color": {
          "$ref": "#/definitions/Color",
          "description": "The color value at this point in the gradient."
        },
        "offset": {
          "description": "The offset fraction for the color stop, indicating its position within the gradient.",
          "type": "number"
        }
      },
      "required": [
        "offset",
        "color"
      ],
      "type": "object"
    },
    "GraticuleTransform": {
      "additionalProperties": false,
      "properties": {
        "extent": {
          "$ref": "#/definitions/Vector2<Vector2<number>>"
        },
        "extentMajor": {
          "$ref": "#/definitions/Vector2<Vector2<number>>"
        },
        "extentMinor": {
          "$ref": "#/definitions/Vector2<Vector2<number>>"
        },
        "precision": {
          "type": "number"
        },
        "signal": {
          "$ref": "#/definitions/SignalName"
        },
        "step": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "stepMajor": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "stepMinor": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "type": {
          "const": "graticule",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "GroupEncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "clip": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>"
        },
        "cornerRadius": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "cornerRadiusBottomLeft": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "cornerRadiusBottomRight": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "cornerRadiusTopLeft": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "cornerRadiusTopRight": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeForeground": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "GroupFieldRef": {
      "additionalProperties": false,
      "properties": {
        "group": {
          "$ref": "#/definitions/Field"
        },
        "level": {
          "type": "number"
        }
      },
      "required": [
        "group"
      ],
      "type": "object"
    },
    "GroupMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "axes": {
          "items": {
            "$ref": "#/definitions/Axis"
          },
          "type": "array"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/Data"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<GroupEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/FromFacet"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "layout": {
          "$ref": "#/definitions/Layout"
        },
        "legends": {
          "items": {
            "$ref": "#/definitions/Legend"
          },
          "type": "array"
        },
        "marks": {
          "items": {
            "$ref": "#/definitions/Mark"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "projections": {
          "items": {
            "$ref": "#/definitions/Projection"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "scales": {
          "items": {
            "$ref": "#/definitions/Scale"
          },
          "type": "array"
        },
        "signals": {
          "items": {
            "$ref": "#/definitions/Signal"
          },
          "type": "array"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "title": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Title"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "group",
          "type": "string"
        },
        "usermeta": {
          "type": "object"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "GuideEncodeEntry<GroupEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/GroupEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/GroupEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/GroupEncodeEntry"
        },
        "interactive": {
          "description": "A boolean flag indicating if the guide element should respond to input events such as mouse hover.",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "A mark style property to apply to the guide group mark."
        },
        "update": {
          "$ref": "#/definitions/GroupEncodeEntry"
        }
      },
      "type": "object"
    },
    "GuideEncodeEntry<RectEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/RectEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/RectEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/RectEncodeEntry"
        },
        "interactive": {
          "description": "A boolean flag indicating if the guide element should respond to input events such as mouse hover.",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "A mark style property to apply to the guide group mark."
        },
        "update": {
          "$ref": "#/definitions/RectEncodeEntry"
        }
      },
      "type": "object"
    },
    "GuideEncodeEntry<RuleEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/RuleEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/RuleEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/RuleEncodeEntry"
        },
        "interactive": {
          "description": "A boolean flag indicating if the guide element should respond to input events such as mouse hover.",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "A mark style property to apply to the guide group mark."
        },
        "update": {
          "$ref": "#/definitions/RuleEncodeEntry"
        }
      },
      "type": "object"
    },
    "GuideEncodeEntry<SymbolEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/SymbolEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/SymbolEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/SymbolEncodeEntry"
        },
        "interactive": {
          "description": "A boolean flag indicating if the guide element should respond to input events such as mouse hover.",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "A mark style property to apply to the guide group mark."
        },
        "update": {
          "$ref": "#/definitions/SymbolEncodeEntry"
        }
      },
      "type": "object"
    },
    "GuideEncodeEntry<TextEncodeEntry>": {
      "additionalProperties": false,
      "properties": {
        "enter": {
          "$ref": "#/definitions/TextEncodeEntry"
        },
        "exit": {
          "$ref": "#/definitions/TextEncodeEntry"
        },
        "hover": {
          "$ref": "#/definitions/TextEncodeEntry"
        },
        "interactive": {
          "description": "A boolean flag indicating if the guide element should respond to input events such as mouse hover.",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "A mark style property to apply to the guide group mark."
        },
        "update": {
          "$ref": "#/definitions/TextEncodeEntry"
        }
      },
      "type": "object"
    },
    "HeatmapTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": "string"
        },
        "color": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "field": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "resolve": {
          "enum": [
            "independent",
            "shared"
          ],
          "type": "string"
        },
        "type": {
          "const": "heatmap",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "HexColor": {
      "format": "color-hex",
      "type": "string"
    },
    "IdentifierTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": "string"
        },
        "type": {
          "const": "identifier",
          "type": "string"
        }
      },
      "required": [
        "type",
        "as"
      ],
      "type": "object"
    },
    "IdentityScale": {
      "additionalProperties": false,
      "properties": {
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "name": {
          "type": "string"
        },
        "nice": {
          "type": "boolean"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "identity",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "ImageEncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "align": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Align>>"
        },
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "aspect": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>"
        },
        "baseline": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Baseline>>"
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "smooth": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "url": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "ImageMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<ImageEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "image",
          "type": "string"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "ImputeMethod": {
      "enum": [
        "value",
        "median",
        "max",
        "min",
        "mean"
      ],
      "type": "string"
    },
    "ImputeTransform": {
      "additionalProperties": false,
      "properties": {
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "groupby": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "key": {
          "$ref": "#/definitions/FieldRef"
        },
        "keyvals": {
          "items": {
          },
          "type": "array"
        },
        "method": {
          "$ref": "#/definitions/ImputeMethod"
        },
        "type": {
          "const": "impute",
          "type": "string"
        },
        "value": {
        }
      },
      "required": [
        "type",
        "field",
        "key"
      ],
      "type": "object"
    },
    "InitSignal": {
      "additionalProperties": false,
      "properties": {
        "bind": {
          "$ref": "#/definitions/Binding"
        },
        "description": {
          "type": "string"
        },
        "init": {
          "$ref": "#/definitions/Expr"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnEvent"
          },
          "type": "array"
        },
        "value": {
          "$ref": "#/definitions/SignalValue"
        }
      },
      "required": [
        "init",
        "name"
      ],
      "type": "object"
    },
    "InputBinding": {
      "additionalProperties": false,
      "properties": {
        "autocomplete": {
          "type": "string"
        },
        "debounce": {
          "type": "number"
        },
        "element": {
          "$ref": "#/definitions/Element"
        },
        "input": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Interpolate": {
      "enum": [
        "basis",
        "basis-open",
        "basis-closed",
        "bundle",
        "cardinal",
        "cardinal-open",
        "cardinal-closed",
        "catmull-rom",
        "linear",
        "linear-closed",
        "monotone",
        "natural",
        "step",
        "step-before",
        "step-after"
      ],
      "type": "string"
    },
    "IsocontourTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": [
            "string",
            "null"
          ]
        },
        "field": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "levels": {
          "type": "number"
        },
        "nice": {
          "type": "boolean"
        },
        "resolve": {
          "enum": [
            "shared",
            "independent"
          ],
          "type": "string"
        },
        "scale": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "smooth": {
          "type": "boolean"
        },
        "thresholds": {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "translate": {
          "anyOf": [
            {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "type": {
          "const": "isocontour",
          "type": "string"
        },
        "zero": {
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "JoinAggregateTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": "array"
        },
        "fields": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/FieldRef"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": "array"
        },
        "groupby": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "ops": {
          "items": {
            "$ref": "#/definitions/AggregateOp"
          },
          "type": "array"
        },
        "type": {
          "const": "joinaggregate",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "KDE2DTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": "string"
        },
        "bandwidth": {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "cellSize": {
          "type": "number"
        },
        "counts": {
          "type": "boolean"
        },
        "groupby": {
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/TransformField"
              }
            ]
          },
          "type": "array"
        },
        "size": {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "type": {
          "const": "kde2d",
          "type": "string"
        },
        "weight": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "x": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "y": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        }
      },
      "required": [
        "type",
        "size",
        "x",
        "y"
      ],
      "type": "object"
    },
    "KDEResolve": {
      "enum": [
        "shared",
        "independent"
      ],
      "type": "string"
    },
    "KDETransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "bandwidth": {
          "type": "number"
        },
        "counts": {
          "type": "boolean"
        },
        "cumulative": {
          "type": "boolean"
        },
        "extent": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "groupby": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "maxsteps": {
          "type": "number"
        },
        "minsteps": {
          "type": "number"
        },
        "resolve": {
          "$ref": "#/definitions/KDEResolve"
        },
        "steps": {
          "type": "number"
        },
        "type": {
          "const": "kde",
          "type": "string"
        }
      },
      "required": [
        "type",
        "field"
      ],
      "type": "object"
    },
    "LabelAnchor": {
      "enum": [
        "left",
        "right",
        "top",
        "bottom",
        "top-left",
        "top-right",
        "bottom-left",
        "bottom-right",
        "middle"
      ],
      "type": "string"
    },
    "LabelOverlap": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "const": "parity",
          "type": "string"
        },
        {
          "const": "greedy",
          "type": "string"
        }
      ]
    },
    "LabelTransform": {
      "additionalProperties": false,
      "properties": {
        "anchor": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/definitions/LabelAnchor"
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/LabelAnchor"
            }
          ]
        },
        "as": {
          "$ref": "#/definitions/Vector7<string>"
        },
        "avoidBaseMark": {
          "type": "boolean"
        },
        "avoidMarks": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lineAnchor": {
          "$ref": "#/definitions/LineLabelAnchor"
        },
        "markIndex": {
          "type": "number"
        },
        "method": {
          "$ref": "#/definitions/AreaLabelMethod"
        },
        "offset": {
          "anyOf": [
            {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            {
              "type": "number"
            }
          ]
        },
        "padding": {
          "type": "number"
        },
        "size": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "type": {
          "const": "label",
          "type": "string"
        }
      },
      "required": [
        "type",
        "size"
      ],
      "type": "object"
    },
    "Layout": {
      "$ref": "#/definitions/LayoutParams"
    },
    "LayoutAlign": {
      "enum": [
        "all",
        "each",
        "none"
      ],
      "type": "string"
    },
    "LayoutBounds": {
      "enum": [
        "full",
        "flush"
      ],
      "type": "string"
    },
    "LayoutOffset": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "additionalProperties": false,
          "properties": {
            "columnFooter": {
              "type": "number"
            },
            "columnHeader": {
              "type": "number"
            },
            "columnTitle": {
              "type": "number"
            },
            "rowFooter": {
              "type": "number"
            },
            "rowHeader": {
              "type": "number"
            },
            "rowTitle": {
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "LayoutParams": {
      "additionalProperties": false,
      "properties": {
        "align": {
          "anyOf": [
            {
              "$ref": "#/definitions/LayoutAlign"
            },
            {
              "$ref": "#/definitions/RowColumn<LayoutAlign>"
            }
          ]
        },
        "bounds": {
          "$ref": "#/definitions/LayoutBounds"
        },
        "columns": {
          "type": "number"
        },
        "footerBand": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/RowColumn<number>"
            }
          ]
        },
        "headerBand": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/RowColumn<number>"
            }
          ]
        },
        "offset": {
          "$ref": "#/definitions/LayoutOffset"
        },
        "padding": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/RowColumn<number>"
            }
          ]
        },
        "titleAnchor": {
          "anyOf": [
            {
              "$ref": "#/definitions/LayoutTitleAnchor"
            },
            {
              "$ref": "#/definitions/RowColumn<LayoutTitleAnchor>"
            }
          ]
        },
        "titleBand": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/RowColumn<number>"
            }
          ]
        }
      },
      "type": "object"
    },
    "LayoutTitleAnchor": {
      "enum": [
        "start",
        "end"
      ],
      "type": "string"
    },
    "Legend": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG group, removing the legend from the ARIA accessibility tree.\n\n__Default value:__ `true`",
          "type": "boolean"
        },
        "clipHeight": {
          "description": "The height in pixels to clip symbol legend entries and limit their size.",
          "type": "number"
        },
        "columnPadding": {
          "description": "The horizontal padding in pixels between symbol legend entries.\n\n__Default value:__ `10`.",
          "type": "number"
        },
        "columns": {
          "description": "The number of columns in which to arrange symbol legend entries. A value of `0` or lower indicates a single row with one column per entry.",
          "type": "number"
        },
        "cornerRadius": {
          "$ref": "#/definitions/NumberValue",
          "description": "Corner radius for the full legend."
        },
        "description": {
          "description": "A text description of this legend for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If the `aria` property is true, for SVG output the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute) will be set to this description. If the description is unspecified it will be automatically generated.",
          "type": "string"
        },
        "direction": {
          "$ref": "#/definitions/Orientation",
          "description": "The direction of the legend, one of `\"vertical\"` (default) or `\"horizontal\"`.\n\n__Default value:__ `\"vertical\"`"
        },
        "encode": {
          "$ref": "#/definitions/LegendEncode",
          "description": "Mark definitions for custom legend encoding."
        },
        "fill": {
          "type": "string"
        },
        "fillColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "Background fill color for the full legend."
        },
        "format": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TimeFormatSpecifier"
            }
          ],
          "description": "The format specifier pattern for legend labels. For numerical values, must be a legal [d3-format](https://github.com/d3/d3-format#locale_format) specifier. For date-time values, must be a legal [d3-time-format](https://github.com/d3/d3-time-format#locale_format) specifier or multi-format object."
        },
        "formatType": {
          "$ref": "#/definitions/FormatType",
          "description": "The format type for legend labels (number, time, or utc)."
        },
        "gradientLength": {
          "description": "The length in pixels of the primary axis of a color gradient. This value corresponds to the height of a vertical gradient or the width of a horizontal gradient.\n\n__Default value:__ `200`.",
          "minimum": 0,
          "type": "number"
        },
        "gradientOpacity": {
          "$ref": "#/definitions/NumberValue",
          "description": "Opacity of the color gradient."
        },
        "gradientStrokeColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "The color of the gradient stroke, can be in hex color code or regular color name.\n\n__Default value:__ `\"lightGray\"`."
        },
        "gradientStrokeWidth": {
          "$ref": "#/definitions/NumberValue",
          "description": "The width of the gradient stroke, in pixels.\n\n__Default value:__ `0`.",
          "minimum": 0
        },
        "gradientThickness": {
          "description": "The thickness in pixels of the color gradient. This value corresponds to the width of a vertical gradient or the height of a horizontal gradient.\n\n__Default value:__ `16`.",
          "minimum": 0,
          "type": "number"
        },
        "gridAlign": {
          "$ref": "#/definitions/LayoutAlign",
          "description": "The alignment to apply to symbol legends rows and columns. The supported string values are `\"all\"`, `\"each\"` (the default), and `none`. For more information, see the [grid layout documentation](https://vega.github.io/vega/docs/layout).\n\n__Default value:__ `\"each\"`."
        },
        "labelAlign": {
          "$ref": "#/definitions/AlignValue",
          "description": "The alignment of the legend label, can be left, center, or right."
        },
        "labelBaseline": {
          "$ref": "#/definitions/TextBaselineValue",
          "description": "The position of the baseline of legend label, can be `\"top\"`, `\"middle\"`, `\"bottom\"`, or `\"alphabetic\"`.\n\n__Default value:__ `\"middle\"`."
        },
        "labelColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "The color of the legend label, can be in hex color code or regular color name."
        },
        "labelFont": {
          "$ref": "#/definitions/StringValue",
          "description": "The font of the legend label."
        },
        "labelFontSize": {
          "$ref": "#/definitions/NumberValue",
          "description": "The font size of legend label.\n\n__Default value:__ `10`.",
          "minimum": 0
        },
        "labelFontStyle": {
          "$ref": "#/definitions/FontStyleValue",
          "description": "The font style of legend label."
        },
        "labelFontWeight": {
          "$ref": "#/definitions/FontWeightValue",
          "description": "The font weight of legend label."
        },
        "labelLimit": {
          "$ref": "#/definitions/NumberValue",
          "description": "Maximum allowed pixel width of legend tick labels.\n\n__Default value:__ `160`."
        },
        "labelOffset": {
          "$ref": "#/definitions/NumberValue",
          "description": "The offset of the legend label."
        },
        "labelOpacity": {
          "$ref": "#/definitions/NumberValue",
          "description": "Opacity of labels."
        },
        "labelOverlap": {
          "$ref": "#/definitions/LabelOverlap",
          "description": "The strategy to use for resolving overlap of labels in gradient legends. If `false`, no overlap reduction is attempted. If set to `true` (default) or `\"parity\"`, a strategy of removing every other label is used. If set to `\"greedy\"`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).\n\n__Default value:__ `true`."
        },
        "labelPadding": {
          "$ref": "#/definitions/NumberValue",
          "description": "Padding in pixels between the legend and legend labels."
        },
        "labelSeparation": {
          "description": "The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.",
          "type": "number"
        },
        "legendX": {
          "$ref": "#/definitions/NumberValue",
          "description": "Custom x-position for legend with orient \"none\"."
        },
        "legendY": {
          "$ref": "#/definitions/NumberValue",
          "description": "Custom y-position for legend with orient \"none\"."
        },
        "offset": {
          "$ref": "#/definitions/NumberValue",
          "description": "The offset in pixels by which to displace the legend from the data rectangle and axes.\n\n__Default value:__ `18`."
        },
        "opacity": {
          "type": "string"
        },
        "orient": {
          "$ref": "#/definitions/LegendOrient",
          "description": "The orientation of the legend, which determines how the legend is positioned within the scene. One of \"left\", \"right\", \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\", \"none\".\n\n__Default value:__ `\"right\"`"
        },
        "padding": {
          "$ref": "#/definitions/NumberValue",
          "description": "The padding between the border and content of the legend group.\n\n__Default value:__ `0`."
        },
        "rowPadding": {
          "description": "The vertical padding in pixels between symbol legend entries.\n\n__Default value:__ `2`.",
          "type": "number"
        },
        "shape": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "stroke": {
          "type": "string"
        },
        "strokeColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "Border stroke color for the full legend."
        },
        "strokeDash": {
          "type": "string"
        },
        "strokeWidth": {
          "type": "string"
        },
        "symbolDash": {
          "$ref": "#/definitions/DashArrayValue",
          "description": "An array of alternating [stroke, space] lengths for dashed symbol strokes."
        },
        "symbolDashOffset": {
          "$ref": "#/definitions/NumberValue",
          "description": "The pixel offset at which to start drawing with the symbol stroke dash array."
        },
        "symbolFillColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "The color of the legend symbol,"
        },
        "symbolLimit": {
          "$ref": "#/definitions/NumberValue",
          "description": "The maximum number of allowed entries for a symbol legend. Additional entries will be dropped."
        },
        "symbolOffset": {
          "$ref": "#/definitions/NumberValue",
          "description": "Horizontal pixel offset for legend symbols.\n\n__Default value:__ `0`."
        },
        "symbolOpacity": {
          "$ref": "#/definitions/NumberValue",
          "description": "Opacity of the legend symbols."
        },
        "symbolSize": {
          "$ref": "#/definitions/NumberValue",
          "description": "The size of the legend symbol, in pixels.\n\n__Default value:__ `100`.",
          "minimum": 0
        },
        "symbolStrokeColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "Stroke color for legend symbols."
        },
        "symbolStrokeWidth": {
          "$ref": "#/definitions/NumberValue",
          "description": "The width of the symbol's stroke.\n\n__Default value:__ `1.5`.",
          "minimum": 0
        },
        "symbolType": {
          "$ref": "#/definitions/SymbolShapeValue",
          "description": "The symbol shape. One of the plotting shapes `circle` (default), `square`, `cross`, `diamond`, `triangle-up`, `triangle-down`, `triangle-right`, or `triangle-left`, the line symbol `stroke`, or one of the centered directional shapes `arrow`, `wedge`, or `triangle`. Alternatively, a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) can be provided. For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.\n\n__Default value:__ `\"circle\"`."
        },
        "tickCount": {
          "$ref": "#/definitions/TickCount",
          "description": "The desired number of tick values for quantitative legends."
        },
        "tickMinStep": {
          "description": "The minimum desired step between tick values for quantitative legends, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.",
          "type": "number"
        },
        "title": {
          "$ref": "#/definitions/Text",
          "description": "The title for the legend."
        },
        "titleAlign": {
          "$ref": "#/definitions/AlignValue",
          "description": "Horizontal text alignment for legend titles.\n\n__Default value:__ `\"left\"`."
        },
        "titleAnchor": {
          "$ref": "#/definitions/AnchorValue",
          "description": "Text anchor position for placing legend titles."
        },
        "titleBaseline": {
          "$ref": "#/definitions/TextBaselineValue",
          "description": "Vertical text baseline for legend titles.  One of `\"alphabetic\"` (default), `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"line-top\"`, or `\"line-bottom\"`. The `\"line-top\"` and `\"line-bottom\"` values operate similarly to `\"top\"` and `\"bottom\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone.\n\n__Default value:__ `\"top\"`."
        },
        "titleColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "The color of the legend title, can be in hex color code or regular color name."
        },
        "titleFont": {
          "$ref": "#/definitions/StringValue",
          "description": "The font of the legend title."
        },
        "titleFontSize": {
          "$ref": "#/definitions/NumberValue",
          "description": "The font size of the legend title."
        },
        "titleFontStyle": {
          "$ref": "#/definitions/FontStyleValue",
          "description": "The font style of the legend title."
        },
        "titleFontWeight": {
          "$ref": "#/definitions/FontWeightValue",
          "description": "The font weight of the legend title. This can be either a string (e.g `\"bold\"`, `\"normal\"`) or a number (`100`, `200`, `300`, ..., `900` where `\"normal\"` = `400` and `\"bold\"` = `700`)."
        },
        "titleLimit": {
          "$ref": "#/definitions/NumberValue",
          "description": "Maximum allowed pixel width of legend titles.\n\n__Default value:__ `180`.",
          "minimum": 0
        },
        "titleLineHeight": {
          "$ref": "#/definitions/NumberValue",
          "description": "Line height in pixels for multi-line title text or title text with `\"line-top\"` or `\"line-bottom\"` baseline."
        },
        "titleOpacity": {
          "$ref": "#/definitions/NumberValue",
          "description": "Opacity of the legend title."
        },
        "titleOrient": {
          "$ref": "#/definitions/OrientValue",
          "description": "Orientation of the legend title."
        },
        "titlePadding": {
          "$ref": "#/definitions/NumberValue",
          "description": "The padding, in pixels, between title and legend.\n\n__Default value:__ `5`."
        },
        "type": {
          "$ref": "#/definitions/LegendType",
          "description": "The type of legend to include. One of `\"symbol\"` for discrete symbol legends, or `\"gradient\"` for a continuous color gradient. If gradient is used only the fill or stroke scale parameters are considered. If unspecified, the type will be inferred based on the scale parameters used and their backing scale types."
        },
        "values": {
          "description": "Explicitly set the visible legend values.",
          "items": {
          },
          "type": "array"
        },
        "zindex": {
          "description": "The integer z-index indicating the layering of the legend group relative to other axis, mark, and legend groups.",
          "minimum": 0,
          "type": "number"
        }
      },
      "type": "object"
    },
    "LegendConfig": {
      "additionalProperties": false,
      "description": "Legend config without signals so we can use it in Vega-Lite.",
      "properties": {
        "aria": {
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG group, removing the legend from the ARIA accessibility tree.\n\n__Default value:__ `true`",
          "type": "boolean"
        },
        "clipHeight": {
          "description": "The height in pixels to clip symbol legend entries and limit their size.",
          "type": "number"
        },
        "columnPadding": {
          "description": "The horizontal padding in pixels between symbol legend entries.\n\n__Default value:__ `10`.",
          "type": "number"
        },
        "columns": {
          "description": "The number of columns in which to arrange symbol legend entries. A value of `0` or lower indicates a single row with one column per entry.",
          "type": "number"
        },
        "cornerRadius": {
          "description": "Corner radius for the full legend.",
          "type": "number"
        },
        "description": {
          "description": "A text description of this legend for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If the `aria` property is true, for SVG output the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute) will be set to this description. If the description is unspecified it will be automatically generated.",
          "type": "string"
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "Background fill color for the full legend."
        },
        "gradientDirection": {
          "$ref": "#/definitions/Orientation",
          "description": "The default direction (`\"horizontal\"` or `\"vertical\"`) for gradient legends.\n\n__Default value:__ `\"vertical\"`."
        },
        "gradientLabelLimit": {
          "description": "The maximum allowed length in pixels of color ramp gradient labels.",
          "type": "number"
        },
        "gradientLabelOffset": {
          "description": "Vertical offset in pixels for color ramp gradient labels.\n\n__Default value:__ `2`.",
          "type": "number"
        },
        "gradientLength": {
          "description": "The length in pixels of the primary axis of a color gradient. This value corresponds to the height of a vertical gradient or the width of a horizontal gradient.\n\n__Default value:__ `200`.",
          "minimum": 0,
          "type": "number"
        },
        "gradientOpacity": {
          "description": "Opacity of the color gradient.",
          "type": "number"
        },
        "gradientStrokeColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "The color of the gradient stroke, can be in hex color code or regular color name.\n\n__Default value:__ `\"lightGray\"`."
        },
        "gradientStrokeWidth": {
          "description": "The width of the gradient stroke, in pixels.\n\n__Default value:__ `0`.",
          "minimum": 0,
          "type": "number"
        },
        "gradientThickness": {
          "description": "The thickness in pixels of the color gradient. This value corresponds to the width of a vertical gradient or the height of a horizontal gradient.\n\n__Default value:__ `16`.",
          "minimum": 0,
          "type": "number"
        },
        "gridAlign": {
          "$ref": "#/definitions/LayoutAlign",
          "description": "The alignment to apply to symbol legends rows and columns. The supported string values are `\"all\"`, `\"each\"` (the default), and `none`. For more information, see the [grid layout documentation](https://vega.github.io/vega/docs/layout).\n\n__Default value:__ `\"each\"`."
        },
        "labelAlign": {
          "$ref": "#/definitions/Align",
          "description": "The alignment of the legend label, can be left, center, or right."
        },
        "labelBaseline": {
          "$ref": "#/definitions/TextBaseline",
          "description": "The position of the baseline of legend label, can be `\"top\"`, `\"middle\"`, `\"bottom\"`, or `\"alphabetic\"`.\n\n__Default value:__ `\"middle\"`."
        },
        "labelColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "The color of the legend label, can be in hex color code or regular color name."
        },
        "labelFont": {
          "description": "The font of the legend label.",
          "type": "string"
        },
        "labelFontSize": {
          "description": "The font size of legend label.\n\n__Default value:__ `10`.",
          "minimum": 0,
          "type": "number"
        },
        "labelFontStyle": {
          "$ref": "#/definitions/FontStyle",
          "description": "The font style of legend label."
        },
        "labelFontWeight": {
          "$ref": "#/definitions/FontWeight",
          "description": "The font weight of legend label."
        },
        "labelLimit": {
          "description": "Maximum allowed pixel width of legend tick labels.\n\n__Default value:__ `160`.",
          "type": "number"
        },
        "labelOffset": {
          "description": "The offset of the legend label.",
          "type": "number"
        },
        "labelOpacity": {
          "description": "Opacity of labels.",
          "type": "number"
        },
        "labelOverlap": {
          "$ref": "#/definitions/LabelOverlap",
          "description": "The strategy to use for resolving overlap of labels in gradient legends. If `false`, no overlap reduction is attempted. If set to `true` (default) or `\"parity\"`, a strategy of removing every other label is used. If set to `\"greedy\"`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).\n\n__Default value:__ `true`."
        },
        "labelPadding": {
          "description": "Padding in pixels between the legend and legend labels.",
          "type": "number"
        },
        "labelSeparation": {
          "description": "The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.",
          "type": "number"
        },
        "layout": {
          "$ref": "#/definitions/LegendLayout",
          "description": "Legend orient group layout parameters."
        },
        "legendX": {
          "description": "Custom x-position for legend with orient \"none\".",
          "type": "number"
        },
        "legendY": {
          "description": "Custom y-position for legend with orient \"none\".",
          "type": "number"
        },
        "offset": {
          "description": "The offset in pixels by which to displace the legend from the data rectangle and axes.\n\n__Default value:__ `18`.",
          "type": "number"
        },
        "orient": {
          "$ref": "#/definitions/LegendOrient",
          "description": "The orientation of the legend, which determines how the legend is positioned within the scene. One of \"left\", \"right\", \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\", \"none\".\n\n__Default value:__ `\"right\"`"
        },
        "padding": {
          "description": "The padding between the border and content of the legend group.\n\n__Default value:__ `0`.",
          "type": "number"
        },
        "rowPadding": {
          "description": "The vertical padding in pixels between symbol legend entries.\n\n__Default value:__ `2`.",
          "type": "number"
        },
        "strokeColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "Border stroke color for the full legend."
        },
        "strokeDash": {
          "description": "Border stroke dash pattern for the full legend.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "strokeWidth": {
          "description": "Border stroke width for the full legend.",
          "type": "number"
        },
        "symbolBaseFillColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "Default fill color for legend symbols. Only applied if there is no `\"fill\"` scale color encoding for the legend.\n\n__Default value:__ `\"transparent\"`."
        },
        "symbolBaseStrokeColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "Default stroke color for legend symbols. Only applied if there is no `\"fill\"` scale color encoding for the legend.\n\n__Default value:__ `\"gray\"`."
        },
        "symbolDash": {
          "description": "An array of alternating [stroke, space] lengths for dashed symbol strokes.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "symbolDashOffset": {
          "description": "The pixel offset at which to start drawing with the symbol stroke dash array.",
          "type": "number"
        },
        "symbolDirection": {
          "$ref": "#/definitions/Orientation",
          "description": "The default direction (`\"horizontal\"` or `\"vertical\"`) for symbol legends.\n\n__Default value:__ `\"vertical\"`."
        },
        "symbolFillColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "The color of the legend symbol,"
        },
        "symbolLimit": {
          "description": "The maximum number of allowed entries for a symbol legend. Additional entries will be dropped.",
          "type": "number"
        },
        "symbolOffset": {
          "description": "Horizontal pixel offset for legend symbols.\n\n__Default value:__ `0`.",
          "type": "number"
        },
        "symbolOpacity": {
          "description": "Opacity of the legend symbols.",
          "type": "number"
        },
        "symbolSize": {
          "description": "The size of the legend symbol, in pixels.\n\n__Default value:__ `100`.",
          "minimum": 0,
          "type": "number"
        },
        "symbolStrokeColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "Stroke color for legend symbols."
        },
        "symbolStrokeWidth": {
          "description": "The width of the symbol's stroke.\n\n__Default value:__ `1.5`.",
          "minimum": 0,
          "type": "number"
        },
        "symbolType": {
          "$ref": "#/definitions/SymbolShape",
          "description": "The symbol shape. One of the plotting shapes `circle` (default), `square`, `cross`, `diamond`, `triangle-up`, `triangle-down`, `triangle-right`, or `triangle-left`, the line symbol `stroke`, or one of the centered directional shapes `arrow`, `wedge`, or `triangle`. Alternatively, a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) can be provided. For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.\n\n__Default value:__ `\"circle\"`."
        },
        "tickCount": {
          "$ref": "#/definitions/TickCount",
          "description": "The desired number of tick values for quantitative legends."
        },
        "titleAlign": {
          "$ref": "#/definitions/Align",
          "description": "Horizontal text alignment for legend titles.\n\n__Default value:__ `\"left\"`."
        },
        "titleAnchor": {
          "$ref": "#/definitions/TitleAnchor",
          "description": "Text anchor position for placing legend titles."
        },
        "titleBaseline": {
          "$ref": "#/definitions/TextBaseline",
          "description": "Vertical text baseline for legend titles.  One of `\"alphabetic\"` (default), `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"line-top\"`, or `\"line-bottom\"`. The `\"line-top\"` and `\"line-bottom\"` values operate similarly to `\"top\"` and `\"bottom\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone.\n\n__Default value:__ `\"top\"`."
        },
        "titleColor": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/Color"
            }
          ],
          "description": "The color of the legend title, can be in hex color code or regular color name."
        },
        "titleFont": {
          "description": "The font of the legend title.",
          "type": "string"
        },
        "titleFontSize": {
          "description": "The font size of the legend title.",
          "type": "number"
        },
        "titleFontStyle": {
          "$ref": "#/definitions/FontStyle",
          "description": "The font style of the legend title."
        },
        "titleFontWeight": {
          "$ref": "#/definitions/FontWeight",
          "description": "The font weight of the legend title. This can be either a string (e.g `\"bold\"`, `\"normal\"`) or a number (`100`, `200`, `300`, ..., `900` where `\"normal\"` = `400` and `\"bold\"` = `700`)."
        },
        "titleLimit": {
          "description": "Maximum allowed pixel width of legend titles.\n\n__Default value:__ `180`.",
          "minimum": 0,
          "type": "number"
        },
        "titleLineHeight": {
          "description": "Line height in pixels for multi-line title text or title text with `\"line-top\"` or `\"line-bottom\"` baseline.",
          "type": "number"
        },
        "titleOpacity": {
          "description": "Opacity of the legend title.",
          "type": "number"
        },
        "titleOrient": {
          "$ref": "#/definitions/Orient",
          "description": "Orientation of the legend title."
        },
        "titlePadding": {
          "description": "The padding, in pixels, between title and legend.\n\n__Default value:__ `5`.",
          "type": "number"
        },
        "zindex": {
          "description": "The integer z-index indicating the layering of the legend group relative to other axis, mark, and legend groups.",
          "minimum": 0,
          "type": "number"
        }
      },
      "type": "object"
    },
    "LegendEncode": {
      "additionalProperties": false,
      "properties": {
        "entries": {
          "$ref": "#/definitions/GuideEncodeEntry<GroupEncodeEntry>"
        },
        "gradient": {
          "$ref": "#/definitions/GuideEncodeEntry<RectEncodeEntry>"
        },
        "labels": {
          "$ref": "#/definitions/GuideEncodeEntry<TextEncodeEntry>"
        },
        "legend": {
          "$ref": "#/definitions/GuideEncodeEntry<GroupEncodeEntry>"
        },
        "symbols": {
          "$ref": "#/definitions/GuideEncodeEntry<SymbolEncodeEntry>"
        },
        "title": {
          "$ref": "#/definitions/GuideEncodeEntry<TextEncodeEntry>"
        }
      },
      "type": "object"
    },
    "LegendLayout": {
      "additionalProperties": false,
      "properties": {
        "anchor": {
          "$ref": "#/definitions/TitleAnchor",
          "description": "The anchor point for legend orient group layout."
        },
        "bottom": {
          "$ref": "#/definitions/BaseLegendLayout"
        },
        "bottom-left": {
          "$ref": "#/definitions/BaseLegendLayout"
        },
        "bottom-right": {
          "$ref": "#/definitions/BaseLegendLayout"
        },
        "bounds": {
          "$ref": "#/definitions/LayoutBounds",
          "description": "The bounds calculation to use for legend orient group layout."
        },
        "center": {
          "description": "A flag to center legends within a shared orient group.",
          "type": "boolean"
        },
        "direction": {
          "$ref": "#/definitions/Orientation",
          "description": "The layout direction for legend orient group layout."
        },
        "left": {
          "$ref": "#/definitions/BaseLegendLayout"
        },
        "margin": {
          "description": "The pixel margin between legends within a orient group.",
          "type": "number"
        },
        "offset": {
          "description": "The pixel offset from the chart body for a legend orient group.",
          "type": "number"
        },
        "right": {
          "$ref": "#/definitions/BaseLegendLayout"
        },
        "top": {
          "$ref": "#/definitions/BaseLegendLayout"
        },
        "top-left": {
          "$ref": "#/definitions/BaseLegendLayout"
        },
        "top-right": {
          "$ref": "#/definitions/BaseLegendLayout"
        }
      },
      "type": "object"
    },
    "LegendOrient": {
      "enum": [
        "none",
        "left",
        "right",
        "top",
        "bottom",
        "top-left",
        "top-right",
        "bottom-left",
        "bottom-right"
      ],
      "type": "string"
    },
    "LegendType": {
      "enum": [
        "gradient",
        "symbol"
      ],
      "type": "string"
    },
    "LineEncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "defined": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "interpolate": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Interpolate>>"
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tension": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "LineLabelAnchor": {
      "enum": [
        "begin",
        "end"
      ],
      "type": "string"
    },
    "LineMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<LineEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "line",
          "type": "string"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "LinearGradient": {
      "additionalProperties": false,
      "properties": {
        "gradient": {
          "const": "linear",
          "description": "The type of gradient. Use `\"linear\"` for a linear gradient.",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "stops": {
          "description": "An array of gradient stops defining the gradient color sequence.",
          "items": {
            "$ref": "#/definitions/GradientStop"
          },
          "type": "array"
        },
        "x1": {
          "description": "The starting x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.\n\n__Default value:__ `0`",
          "type": "number"
        },
        "x2": {
          "description": "The ending x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.\n\n__Default value:__ `1`",
          "type": "number"
        },
        "y1": {
          "description": "The starting y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.\n\n__Default value:__ `0`",
          "type": "number"
        },
        "y2": {
          "description": "The ending y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.\n\n__Default value:__ `0`",
          "type": "number"
        }
      },
      "required": [
        "gradient",
        "stops"
      ],
      "type": "object"
    },
    "LinearScale": {
      "additionalProperties": false,
      "properties": {
        "bins": {
          "$ref": "#/definitions/ScaleBins"
        },
        "clamp": {
          "type": "boolean"
        },
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "interpolate": {
          "$ref": "#/definitions/ScaleInterpolate"
        },
        "name": {
          "type": "string"
        },
        "nice": {
          "type": [
            "boolean",
            "number"
          ]
        },
        "padding": {
          "type": "number"
        },
        "range": {
          "$ref": "#/definitions/RangeScheme"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "linear",
          "type": "string"
        },
        "zero": {
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "LinkPathOrient": {
      "enum": [
        "horizontal",
        "vertical",
        "radial"
      ],
      "type": "string"
    },
    "LinkPathShape": {
      "enum": [
        "line",
        "arc",
        "curve",
        "diagonal",
        "orthogonal"
      ],
      "type": "string"
    },
    "LinkPathTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": "string"
        },
        "orient": {
          "$ref": "#/definitions/LinkPathOrient"
        },
        "shape": {
          "$ref": "#/definitions/LinkPathShape"
        },
        "sourceX": {
          "$ref": "#/definitions/FieldRef"
        },
        "sourceY": {
          "$ref": "#/definitions/FieldRef"
        },
        "targetX": {
          "$ref": "#/definitions/FieldRef"
        },
        "targetY": {
          "$ref": "#/definitions/FieldRef"
        },
        "type": {
          "const": "linkpath",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Locale": {
      "additionalProperties": false,
      "properties": {
        "number": {
          "$ref": "#/definitions/NumberLocale"
        },
        "time": {
          "$ref": "#/definitions/TimeLocale"
        }
      },
      "type": "object"
    },
    "LoessTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "bandwidth": {
          "type": "number"
        },
        "groupby": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "type": {
          "const": "loess",
          "type": "string"
        },
        "x": {
          "$ref": "#/definitions/FieldRef"
        },
        "y": {
          "$ref": "#/definitions/FieldRef"
        }
      },
      "required": [
        "type",
        "x",
        "y"
      ],
      "type": "object"
    },
    "LogScale": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "type": "number"
        },
        "bins": {
          "$ref": "#/definitions/ScaleBins"
        },
        "clamp": {
          "type": "boolean"
        },
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "interpolate": {
          "$ref": "#/definitions/ScaleInterpolate"
        },
        "name": {
          "type": "string"
        },
        "nice": {
          "type": [
            "boolean",
            "number"
          ]
        },
        "padding": {
          "type": "number"
        },
        "range": {
          "$ref": "#/definitions/RangeScheme"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "log",
          "type": "string"
        },
        "zero": {
          "const": false,
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "LookupTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "default": {
        },
        "fields": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "from": {
          "$ref": "#/definitions/DataName"
        },
        "key": {
          "$ref": "#/definitions/FieldRef"
        },
        "type": {
          "const": "lookup",
          "type": "string"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        }
      },
      "required": [
        "type",
        "from",
        "key",
        "fields"
      ],
      "type": "object"
    },
    "Mark": {
      "anyOf": [
        {
          "$ref": "#/definitions/ArcMark"
        },
        {
          "$ref": "#/definitions/AreaMark"
        },
        {
          "$ref": "#/definitions/ImageMark"
        },
        {
          "$ref": "#/definitions/GroupMark"
        },
        {
          "$ref": "#/definitions/LineMark"
        },
        {
          "$ref": "#/definitions/PathMark"
        },
        {
          "$ref": "#/definitions/RectMark"
        },
        {
          "$ref": "#/definitions/RuleMark"
        },
        {
          "$ref": "#/definitions/ShapeMark"
        },
        {
          "$ref": "#/definitions/SymbolMark"
        },
        {
          "$ref": "#/definitions/TextMark"
        },
        {
          "$ref": "#/definitions/TrailMark"
        }
      ]
    },
    "MarkConfig": {
      "additionalProperties": false,
      "properties": {
        "align": {
          "$ref": "#/definitions/Align",
          "description": "The horizontal alignment of the text. One of `\"left\"`, `\"right\"`, `\"center\"`."
        },
        "angle": {
          "description": "The rotation angle of the text, in degrees.",
          "maximum": 360,
          "minimum": 0,
          "type": "number"
        },
        "aria": {
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree.",
          "type": "boolean"
        },
        "ariaRole": {
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future.",
          "type": "string"
        },
        "ariaRoleDescription": {
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future.",
          "type": "string"
        },
        "aspect": {
          "description": "Whether to keep aspect ratio of image marks.",
          "type": "boolean"
        },
        "baseline": {
          "$ref": "#/definitions/TextBaseline",
          "description": "The vertical alignment of the text. One of `\"top\"`, `\"bottom\"`, `\"middle\"`, `\"alphabetic\"`.\n\n__Default value:__ `\"middle\"`"
        },
        "blend": {
          "$ref": "#/definitions/Blend",
          "description": "The color blend mode for drawing an item on its current background. Any valid [CSS mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value can be used.\n\n__Default value: `\"source-over\"`"
        },
        "cornerRadius": {
          "description": "The radius in pixels of rounded rectangles or arcs' corners.\n\n__Default value:__ `0`",
          "type": "number"
        },
        "cornerRadiusBottomLeft": {
          "description": "The radius in pixels of rounded rectangles' bottom left corner.\n\n__Default value:__ `0`",
          "type": "number"
        },
        "cornerRadiusBottomRight": {
          "description": "The radius in pixels of rounded rectangles' bottom right corner.\n\n__Default value:__ `0`",
          "type": "number"
        },
        "cornerRadiusTopLeft": {
          "description": "The radius in pixels of rounded rectangles' top right corner.\n\n__Default value:__ `0`",
          "type": "number"
        },
        "cornerRadiusTopRight": {
          "description": "The radius in pixels of rounded rectangles' top left corner.\n\n__Default value:__ `0`",
          "type": "number"
        },
        "cursor": {
          "$ref": "#/definitions/Cursor",
          "description": "The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."
        },
        "description": {
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).",
          "type": "string"
        },
        "dir": {
          "$ref": "#/definitions/TextDirection",
          "description": "The direction of the text. One of `\"ltr\"` (left-to-right) or `\"rtl\"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\n\n__Default value:__ `\"ltr\"`"
        },
        "dx": {
          "description": "The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
          "type": "number"
        },
        "dy": {
          "description": "The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
          "type": "number"
        },
        "ellipsis": {
          "description": "The ellipsis string for text truncated in response to the limit parameter.\n\n__Default value:__ `\"…\"`",
          "type": "string"
        },
        "endAngle": {
          "description": "The end angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.",
          "type": "number"
        },
        "fill": {
          "anyOf": [
            {
              "$ref": "#/definitions/Color"
            },
            {
              "$ref": "#/definitions/Gradient"
            },
            {
              "type": "null"
            }
          ],
          "description": "Default fill color.\n\n__Default value:__ (None)"
        },
        "fillOpacity": {
          "description": "The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        },
        "font": {
          "description": "The typeface to set the text in (e.g., `\"Helvetica Neue\"`).",
          "type": "string"
        },
        "fontSize": {
          "description": "The font size, in pixels.\n\n__Default value:__ `11`",
          "minimum": 0,
          "type": "number"
        },
        "fontStyle": {
          "$ref": "#/definitions/FontStyle",
          "description": "The font style (e.g., `\"italic\"`)."
        },
        "fontWeight": {
          "$ref": "#/definitions/FontWeight",
          "description": "The font weight. This can be either a string (e.g `\"bold\"`, `\"normal\"`) or a number (`100`, `200`, `300`, ..., `900` where `\"normal\"` = `400` and `\"bold\"` = `700`)."
        },
        "height": {
          "description": "Height of the marks.",
          "type": "number"
        },
        "href": {
          "$ref": "#/definitions/URI",
          "description": "A URL to load upon mouse click. If defined, the mark acts as a hyperlink."
        },
        "innerRadius": {
          "description": "The inner radius in pixels of arc marks.",
          "type": "number"
        },
        "interpolate": {
          "$ref": "#/definitions/Interpolate",
          "description": "The line interpolation method to use for line and area marks. One of the following:\n- `\"linear\"`: piecewise linear segments, as in a polyline.\n- `\"linear-closed\"`: close the linear segments to form a polygon.\n- `\"step\"`: alternate between horizontal and vertical segments, as in a step function.\n- `\"step-before\"`: alternate between vertical and horizontal segments, as in a step function.\n- `\"step-after\"`: alternate between horizontal and vertical segments, as in a step function.\n- `\"basis\"`: a B-spline, with control point duplication on the ends.\n- `\"basis-open\"`: an open B-spline; may not intersect the start or end.\n- `\"basis-closed\"`: a closed B-spline, as in a loop.\n- `\"cardinal\"`: a Cardinal spline, with control point duplication on the ends.\n- `\"cardinal-open\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `\"cardinal-closed\"`: a closed Cardinal spline, as in a loop.\n- `\"bundle\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `\"monotone\"`: cubic interpolation that preserves monotonicity in y."
        },
        "limit": {
          "description": "The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0` -- indicating no limit",
          "type": "number"
        },
        "lineBreak": {
          "description": "A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property is ignored if the text is array-valued.",
          "type": "string"
        },
        "lineHeight": {
          "description": "The line height in pixels (the spacing between subsequent lines of text) for multi-line text marks.",
          "type": "number"
        },
        "opacity": {
          "description": "The overall opacity (value between [0,1]).",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        },
        "orient": {
          "$ref": "#/definitions/Orientation",
          "description": "The orientation of the area mark. One of `horizontal` or `vertical` (the default). With a vertical orientation, an area mark is defined by the `x`, `y`, and (`y2` or `height`) properties; with a horizontal orientation, the `y`, `x` and (`x2` or `width`) properties must be specified instead."
        },
        "outerRadius": {
          "description": "The outer radius in pixels of arc marks.",
          "type": "number"
        },
        "padAngle": {
          "description": "The angular padding applied to sides of the arc, in radians.",
          "type": "number"
        },
        "radius": {
          "description": "Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.",
          "minimum": 0,
          "type": "number"
        },
        "shape": {
          "anyOf": [
            {
              "$ref": "#/definitions/SymbolShape"
            },
            {
              "type": "string"
            }
          ],
          "description": "Shape of the point marks. Supported values include:\n- plotting shapes: `\"circle\"`, `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, `\"triangle-down\"`, `\"triangle-right\"`, or `\"triangle-left\"`.\n- the line symbol `\"stroke\"`\n- centered directional shapes `\"arrow\"`, `\"wedge\"`, or `\"triangle\"`\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n__Default value:__ `\"circle\"`"
        },
        "size": {
          "description": "The area in pixels of the symbols bounding box. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.\n\n__Default value:__ `30`",
          "minimum": 0,
          "type": "number"
        },
        "smooth": {
          "description": "A boolean flag (default true) indicating if the image should be smoothed when resized. If false, individual pixels should be scaled directly rather than interpolated with smoothing. For SVG rendering, this option may not work in some browsers due to lack of standardization.",
          "type": "boolean"
        },
        "startAngle": {
          "description": "The start angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.",
          "type": "number"
        },
        "stroke": {
          "anyOf": [
            {
              "$ref": "#/definitions/Color"
            },
            {
              "$ref": "#/definitions/Gradient"
            },
            {
              "type": "null"
            }
          ],
          "description": "Default stroke color.\n\n__Default value:__ (None)"
        },
        "strokeCap": {
          "$ref": "#/definitions/StrokeCap",
          "description": "The stroke cap for line ending style. One of `\"butt\"`, `\"round\"`, or `\"square\"`.\n\n__Default value:__ `\"butt\"`"
        },
        "strokeDash": {
          "description": "An array of alternating stroke, space lengths for creating dashed or dotted lines.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "strokeDashOffset": {
          "description": "The offset (in pixels) into which to begin drawing with the stroke dash array.",
          "type": "number"
        },
        "strokeJoin": {
          "$ref": "#/definitions/StrokeJoin",
          "description": "The stroke line join method. One of `\"miter\"`, `\"round\"` or `\"bevel\"`.\n\n__Default value:__ `\"miter\"`"
        },
        "strokeMiterLimit": {
          "description": "The miter limit at which to bevel a line join.",
          "type": "number"
        },
        "strokeOffset": {
          "description": "The offset in pixels at which to draw the group stroke and fill. If unspecified, the default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths align with the pixel grid.",
          "type": "number"
        },
        "strokeOpacity": {
          "description": "The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        },
        "strokeWidth": {
          "description": "The stroke width, in pixels.",
          "minimum": 0,
          "type": "number"
        },
        "tension": {
          "description": "Depending on the interpolation type, sets the tension parameter (for line and area marks).",
          "type": "number"
        },
        "text": {
          "$ref": "#/definitions/Text",
          "description": "Placeholder text if the `text` channel is not specified"
        },
        "theta": {
          "description": "Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".",
          "type": "number"
        },
        "tooltip": {
          "description": "The tooltip text to show upon mouse hover.",
          "type": "string"
        },
        "url": {
          "$ref": "#/definitions/URI",
          "description": "The URL of the image file for image marks."
        },
        "width": {
          "description": "Width of the marks.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "MarkType": {
      "enum": [
        "arc",
        "area",
        "image",
        "group",
        "line",
        "path",
        "rect",
        "rule",
        "shape",
        "symbol",
        "text",
        "trail"
      ],
      "type": "string"
    },
    "MergedStream": {
      "additionalProperties": false,
      "properties": {
        "between": {
          "items": {
            "$ref": "#/definitions/Stream"
          },
          "type": "array"
        },
        "consume": {
          "type": "boolean"
        },
        "debounce": {
          "type": "number"
        },
        "filter": {
          "anyOf": [
            {
              "$ref": "#/definitions/Expr"
            },
            {
              "items": {
                "$ref": "#/definitions/Expr"
              },
              "type": "array"
            }
          ]
        },
        "markname": {
          "type": "string"
        },
        "marktype": {
          "$ref": "#/definitions/MarkType"
        },
        "merge": {
          "items": {
            "$ref": "#/definitions/Stream"
          },
          "type": "array"
        },
        "throttle": {
          "type": "number"
        }
      },
      "required": [
        "merge"
      ],
      "type": "object"
    },
    "NestTransform": {
      "additionalProperties": false,
      "properties": {
        "generate": {
          "type": "boolean"
        },
        "keys": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "type": {
          "const": "nest",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "NewSignal": {
      "additionalProperties": false,
      "properties": {
        "bind": {
          "$ref": "#/definitions/Binding"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnEvent"
          },
          "type": "array"
        },
        "react": {
          "type": "boolean"
        },
        "update": {
          "$ref": "#/definitions/Expr"
        },
        "value": {
          "$ref": "#/definitions/SignalValue"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "NumberLocale": {
      "additionalProperties": false,
      "description": "Locale definition for formatting numbers.",
      "properties": {
        "currency": {
          "$ref": "#/definitions/Vector2<string>",
          "description": "The currency prefix and suffix (e.g., [\"$\", \"\"])."
        },
        "decimal": {
          "description": "The decimal point (e.g., \".\").",
          "type": "string"
        },
        "grouping": {
          "description": "The array of group sizes (e.g., [3]), cycled as needed.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "minus": {
          "description": "The minus sign (defaults to hyphen-minus, \"-\").",
          "type": "string"
        },
        "nan": {
          "description": "The not-a-number value (defaults to \"NaN\").",
          "type": "string"
        },
        "numerals": {
          "$ref": "#/definitions/Vector10<string>",
          "description": "An array of ten strings to replace the numerals 0-9."
        },
        "percent": {
          "description": "The percent sign (defaults to \"%\").",
          "type": "string"
        },
        "thousands": {
          "description": "The group separator (e.g., \",\").",
          "type": "string"
        }
      },
      "required": [
        "decimal",
        "thousands",
        "grouping",
        "currency"
      ],
      "type": "object"
    },
    "NumberValue": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "$ref": "#/definitions/NumericValueRef"
        }
      ]
    },
    "NumericValueRef": {
      "anyOf": [
        {
          "properties": {
            "exponent": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/NumericValueRef"
                }
              ]
            },
            "extra": {
              "type": "boolean"
            },
            "mult": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/NumericValueRef"
                }
              ]
            },
            "offset": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/NumericValueRef"
                }
              ]
            },
            "round": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "exponent": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/NumericValueRef"
                }
              ]
            },
            "extra": {
              "type": "boolean"
            },
            "mult": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/NumericValueRef"
                }
              ]
            },
            "offset": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/NumericValueRef"
                }
              ]
            },
            "round": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ]
    },
    "OnEvent": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "encode": {
              "type": "string"
            },
            "events": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Events"
                },
                {
                  "items": {
                    "$ref": "#/definitions/EventListener"
                  },
                  "type": "array"
                }
              ]
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "encode",
            "events"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "events": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Events"
                },
                {
                  "items": {
                    "$ref": "#/definitions/EventListener"
                  },
                  "type": "array"
                }
              ]
            },
            "force": {
              "type": "boolean"
            },
            "update": {
              "$ref": "#/definitions/Update"
            }
          },
          "required": [
            "events",
            "update"
          ],
          "type": "object"
        }
      ]
    },
    "OnMarkTrigger": {
      "additionalProperties": false,
      "properties": {
        "modify": {
          "$ref": "#/definitions/Expr"
        },
        "trigger": {
          "$ref": "#/definitions/Expr"
        },
        "values": {
          "$ref": "#/definitions/Expr"
        }
      },
      "required": [
        "trigger"
      ],
      "type": "object"
    },
    "OnTrigger": {
      "additionalProperties": false,
      "properties": {
        "insert": {
          "$ref": "#/definitions/Expr"
        },
        "modify": {
          "$ref": "#/definitions/Expr"
        },
        "remove": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/definitions/Expr"
            }
          ]
        },
        "toggle": {
          "$ref": "#/definitions/Expr"
        },
        "trigger": {
          "$ref": "#/definitions/Expr"
        },
        "values": {
          "$ref": "#/definitions/Expr"
        }
      },
      "required": [
        "trigger"
      ],
      "type": "object"
    },
    "OrdinalScale": {
      "additionalProperties": false,
      "properties": {
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainImplicit": {
          "type": "boolean"
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "interpolate": {
          "$ref": "#/definitions/ScaleInterpolate"
        },
        "name": {
          "type": "string"
        },
        "range": {
          "anyOf": [
            {
              "$ref": "#/definitions/RangeScheme"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "ordinal",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "Orient": {
      "enum": [
        "left",
        "right",
        "top",
        "bottom"
      ],
      "type": "string"
    },
    "OrientValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/Orient"
        },
        {
          "$ref": "#/definitions/OrientValueRef"
        }
      ]
    },
    "OrientValueRef": {
      "$ref": "#/definitions/ScaledValueRef<Orient>"
    },
    "Orientation": {
      "enum": [
        "horizontal",
        "vertical"
      ],
      "type": "string"
    },
    "PackTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector5<string>"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "padding": {
          "type": "number"
        },
        "radius": {
          "$ref": "#/definitions/FieldRef"
        },
        "size": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "type": {
          "const": "pack",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Padding": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "additionalProperties": false,
          "properties": {
            "bottom": {
              "type": "number"
            },
            "left": {
              "type": "number"
            },
            "right": {
              "type": "number"
            },
            "top": {
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "ParentFieldRef": {
      "additionalProperties": false,
      "properties": {
        "level": {
          "type": "number"
        },
        "parent": {
          "$ref": "#/definitions/Field"
        }
      },
      "required": [
        "parent"
      ],
      "type": "object"
    },
    "Parse": {
      "anyOf": [
        {
          "const": "auto",
          "type": "string"
        },
        {
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/DataType"
              },
              {
                "type": "string"
              }
            ]
          },
          "type": "object"
        }
      ]
    },
    "PartitionTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector6<string>"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "padding": {
          "type": "number"
        },
        "round": {
          "type": "boolean"
        },
        "size": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "type": {
          "const": "partition",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "PathEncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "angle": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "path": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "scaleX": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "scaleY": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "PathMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<PathEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "path",
          "type": "string"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "PieTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "endAngle": {
          "type": "number"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "sort": {
          "type": "boolean"
        },
        "startAngle": {
          "type": "number"
        },
        "type": {
          "const": "pie",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "PivotTransform": {
      "additionalProperties": false,
      "properties": {
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "groupby": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "key": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "limit": {
          "type": "number"
        },
        "op": {
          "type": "string"
        },
        "type": {
          "const": "pivot",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/FieldRef"
        }
      },
      "required": [
        "type",
        "field",
        "value"
      ],
      "type": "object"
    },
    "PointScale": {
      "additionalProperties": false,
      "properties": {
        "align": {
          "type": "number"
        },
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "name": {
          "type": "string"
        },
        "padding": {
          "type": "number"
        },
        "paddingOuter": {
          "type": "number"
        },
        "range": {
          "$ref": "#/definitions/RangeBand"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "point",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "PowScale": {
      "additionalProperties": false,
      "properties": {
        "bins": {
          "$ref": "#/definitions/ScaleBins"
        },
        "clamp": {
          "type": "boolean"
        },
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "exponent": {
          "type": "number"
        },
        "interpolate": {
          "$ref": "#/definitions/ScaleInterpolate"
        },
        "name": {
          "type": "string"
        },
        "nice": {
          "type": [
            "boolean",
            "number"
          ]
        },
        "padding": {
          "type": "number"
        },
        "range": {
          "$ref": "#/definitions/RangeScheme"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "pow",
          "type": "string"
        },
        "zero": {
          "type": "boolean"
        }
      },
      "required": [
        "exponent",
        "name",
        "type"
      ],
      "type": "object"
    },
    "ProductionRule<ArbitraryValueRef>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ArbitraryValueRef"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<BooleanValueRef>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BooleanValueRef"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ColorValueRef>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ColorValueRef"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/LinearGradient"
                      },
                      {
                        "$ref": "#/definitions/RadialGradient"
                      }
                    ]
                  }
                },
                "required": [
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "count": {
                    "type": "number"
                  },
                  "gradient": {
                    "$ref": "#/definitions/Field"
                  },
                  "start": {
                    "items": {
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "stop": {
                    "items": {
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "gradient"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "color": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ColorRGB"
                      },
                      {
                        "$ref": "#/definitions/ColorHSL"
                      },
                      {
                        "$ref": "#/definitions/ColorLAB"
                      },
                      {
                        "$ref": "#/definitions/ColorHCL"
                      }
                    ]
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "color"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<FontStyleValueRef>": {
      "anyOf": [
        {
          "$ref": "#/definitions/FontStyleValueRef"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<FontWeightValueRef>": {
      "anyOf": [
        {
          "$ref": "#/definitions/FontWeightValueRef"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<NumericValueRef>": {
      "anyOf": [
        {
          "$ref": "#/definitions/NumericValueRef"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "exponent": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "$ref": "#/definitions/NumericValueRef"
                      }
                    ]
                  },
                  "extra": {
                    "type": "boolean"
                  },
                  "mult": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "$ref": "#/definitions/NumericValueRef"
                      }
                    ]
                  },
                  "offset": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "$ref": "#/definitions/NumericValueRef"
                      }
                    ]
                  },
                  "round": {
                    "type": "boolean"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "exponent": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "$ref": "#/definitions/NumericValueRef"
                      }
                    ]
                  },
                  "extra": {
                    "type": "boolean"
                  },
                  "mult": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "$ref": "#/definitions/NumericValueRef"
                      }
                    ]
                  },
                  "offset": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "$ref": "#/definitions/NumericValueRef"
                      }
                    ]
                  },
                  "round": {
                    "type": "boolean"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ScaledValueRef<Align>>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<Align>"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ScaledValueRef<Baseline>>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<Baseline>"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ScaledValueRef<Blend>>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<Blend>"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ScaledValueRef<Cursor>>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<Cursor>"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ScaledValueRef<Interpolate>>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<Interpolate>"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ScaledValueRef<Orientation>>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<Orientation>"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ScaledValueRef<StrokeCap>>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<StrokeCap>"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ScaledValueRef<StrokeJoin>>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<StrokeJoin>"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ScaledValueRef<SymbolShape>>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<SymbolShape>"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ScaledValueRef<TextDirection>>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<TextDirection>"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<ScaledValueRef<number[]>>": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaledValueRef<number[]>"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<StringValueRef>": {
      "anyOf": [
        {
          "$ref": "#/definitions/StringValueRef"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<TextBaselineValueRef>": {
      "anyOf": [
        {
          "$ref": "#/definitions/TextBaselineValueRef"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProductionRule<TextValueRef>": {
      "anyOf": [
        {
          "$ref": "#/definitions/TextValueRef"
        },
        {
          "items": {
            "anyOf": [
              {
                "properties": {
                  "test": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  },
                  "value": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "scale",
                  "value"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "field": {
                    "$ref": "#/definitions/Field"
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "field",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "band": {
                    "type": [
                      "boolean",
                      "number"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "band",
                  "scale"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "range": {
                    "type": [
                      "number",
                      "boolean"
                    ]
                  },
                  "scale": {
                    "$ref": "#/definitions/Field"
                  },
                  "test": {
                    "type": "string"
                  }
                },
                "required": [
                  "range",
                  "scale"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        }
      ]
    },
    "ProjectTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": "array"
        },
        "fields": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "type": {
          "const": "project",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Projection": {
      "additionalProperties": false,
      "properties": {
        "center": {
          "$ref": "#/definitions/Vector2<number>",
          "description": "The projection's center, a two-element array of longitude and latitude in degrees.\n\n__Default value:__ `[0, 0]`"
        },
        "clipAngle": {
          "description": "The projection's clipping circle radius to the specified angle in degrees. If `null`, switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than small-circle clipping.",
          "type": "number"
        },
        "clipExtent": {
          "$ref": "#/definitions/Vector2<Vector2<number>>",
          "description": "The projection's viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no viewport clipping is performed."
        },
        "coefficient": {
          "type": "number"
        },
        "distance": {
          "type": "number"
        },
        "extent": {
          "$ref": "#/definitions/Vector2<Vector2<number>>"
        },
        "fit": {
          "anyOf": [
            {
              "$ref": "#/definitions/Fit"
            },
            {
              "items": {
                "$ref": "#/definitions/Fit"
              },
              "type": "array"
            }
          ]
        },
        "fraction": {
          "type": "number"
        },
        "lobes": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "parallel": {
          "type": "number"
        },
        "parallels": {
          "description": "For conic projections, the [two standard parallels](https://en.wikipedia.org/wiki/Map_projection#Conic) that define the map layout. The default depends on the specific conic projection used.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "pointRadius": {
          "description": "The default radius (in pixels) to use when drawing GeoJSON `Point` and `MultiPoint` geometries. This parameter sets a constant default value. To modify the point radius in response to data, see the corresponding parameter of the GeoPath and GeoShape transforms.\n\n__Default value:__ `4.5`",
          "type": "number"
        },
        "precision": {
          "description": "The threshold for the projection's [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection's current resampling precision which defaults to `√0.5 ≅ 0.70710…`.",
          "type": "number"
        },
        "radius": {
          "type": "number"
        },
        "ratio": {
          "type": "number"
        },
        "reflectX": {
          "type": "boolean"
        },
        "reflectY": {
          "type": "boolean"
        },
        "rotate": {
          "anyOf": [
            {
              "$ref": "#/definitions/Vector2<number>"
            },
            {
              "$ref": "#/definitions/Vector3<number>"
            }
          ],
          "description": "The projection's three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)\n\n__Default value:__ `[0, 0, 0]`"
        },
        "scale": {
          "description": "The projection’s scale factor. The default scale is projection-specific. The scale factor corresponds linearly to the distance between projected points; however, scale factor values are not equivalent across projections.",
          "type": "number"
        },
        "size": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "spacing": {
          "type": "number"
        },
        "tilt": {
          "type": "number"
        },
        "translate": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "type": {
          "$ref": "#/definitions/ProjectionType"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ProjectionConfig": {
      "$ref": "#/definitions/ExcludeMappedValueRef<BaseProjection>"
    },
    "ProjectionName": {
      "type": "string"
    },
    "ProjectionType": {
      "enum": [
        "albers",
        "albersUsa",
        "azimuthalEqualArea",
        "azimuthalEquidistant",
        "conicConformal",
        "conicEqualArea",
        "conicEquidistant",
        "equalEarth",
        "equirectangular",
        "gnomonic",
        "identity",
        "mercator",
        "naturalEarth1",
        "orthographic",
        "stereographic",
        "transverseMercator"
      ],
      "type": "string"
    },
    "PushSignal": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnEvent"
          },
          "type": "array"
        },
        "push": {
          "const": "outer",
          "type": "string"
        }
      },
      "required": [
        "name",
        "push"
      ],
      "type": "object"
    },
    "QuantileScale": {
      "additionalProperties": false,
      "properties": {
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "interpolate": {
          "$ref": "#/definitions/ScaleInterpolate"
        },
        "name": {
          "type": "string"
        },
        "range": {
          "$ref": "#/definitions/RangeScheme"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "quantile",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "QuantileTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "groupby": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "probs": {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "step": {
          "type": "number"
        },
        "type": {
          "const": "quantile",
          "type": "string"
        }
      },
      "required": [
        "type",
        "field"
      ],
      "type": "object"
    },
    "QuantizeScale": {
      "additionalProperties": false,
      "properties": {
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "name": {
          "type": "string"
        },
        "nice": {
          "type": [
            "boolean",
            "number"
          ]
        },
        "padding": {
          "type": "number"
        },
        "range": {
          "$ref": "#/definitions/RangeScheme"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "quantize",
          "type": "string"
        },
        "zero": {
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "RadialGradient": {
      "additionalProperties": false,
      "properties": {
        "gradient": {
          "const": "radial",
          "description": "The type of gradient. Use `\"radial\"` for a radial gradient.",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "r1": {
          "description": "The radius length, in normalized [0, 1] coordinates, of the inner circle for the gradient.\n\n__Default value:__ `0`",
          "type": "number"
        },
        "r2": {
          "description": "The radius length, in normalized [0, 1] coordinates, of the outer circle for the gradient.\n\n__Default value:__ `0.5`",
          "type": "number"
        },
        "stops": {
          "description": "An array of gradient stops defining the gradient color sequence.",
          "items": {
            "$ref": "#/definitions/GradientStop"
          },
          "type": "array"
        },
        "x1": {
          "description": "The x-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle for the gradient.\n\n__Default value:__ `0.5`",
          "type": "number"
        },
        "x2": {
          "description": "The x-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle for the gradient.\n\n__Default value:__ `0.5`",
          "type": "number"
        },
        "y1": {
          "description": "The y-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle for the gradient.\n\n__Default value:__ `0.5`",
          "type": "number"
        },
        "y2": {
          "description": "The y-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle for the gradient.\n\n__Default value:__ `0.5`",
          "type": "number"
        }
      },
      "required": [
        "gradient",
        "stops"
      ],
      "type": "object"
    },
    "RangeBand": {
      "anyOf": [
        {
          "$ref": "#/definitions/RangeEnum"
        },
        {
          "$ref": "#/definitions/RangeRaw"
        },
        {
          "additionalProperties": false,
          "properties": {
            "step": {
              "type": "number"
            }
          },
          "required": [
            "step"
          ],
          "type": "object"
        }
      ]
    },
    "RangeConfig": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/RangeScheme"
          },
          {
            "type": "array"
          }
        ]
      },
      "properties": {
        "category": {
          "anyOf": [
            {
              "$ref": "#/definitions/RangeScheme"
            },
            {
              "items": {
                "$ref": "#/definitions/Color"
              },
              "type": "array"
            }
          ],
          "description": "Default [color scheme](https://vega.github.io/vega/docs/schemes/) for categorical data."
        },
        "diverging": {
          "anyOf": [
            {
              "$ref": "#/definitions/RangeScheme"
            },
            {
              "items": {
                "$ref": "#/definitions/Color"
              },
              "type": "array"
            }
          ],
          "description": "Default [color scheme](https://vega.github.io/vega/docs/schemes/) for diverging quantitative ramps."
        },
        "heatmap": {
          "anyOf": [
            {
              "$ref": "#/definitions/RangeScheme"
            },
            {
              "items": {
                "$ref": "#/definitions/Color"
              },
              "type": "array"
            }
          ],
          "description": "Default [color scheme](https://vega.github.io/vega/docs/schemes/) for quantitative heatmaps."
        },
        "ordinal": {
          "anyOf": [
            {
              "$ref": "#/definitions/RangeScheme"
            },
            {
              "items": {
                "$ref": "#/definitions/Color"
              },
              "type": "array"
            }
          ],
          "description": "Default [color scheme](https://vega.github.io/vega/docs/schemes/) for rank-ordered data."
        },
        "ramp": {
          "anyOf": [
            {
              "$ref": "#/definitions/RangeScheme"
            },
            {
              "items": {
                "$ref": "#/definitions/Color"
              },
              "type": "array"
            }
          ],
          "description": "Default [color scheme](https://vega.github.io/vega/docs/schemes/) for sequential quantitative ramps."
        },
        "symbol": {
          "description": "Array of [symbol](https://vega.github.io/vega/docs/marks/symbol/) names or paths for the default shape palette.",
          "items": {
            "$ref": "#/definitions/SymbolShape"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RangeEnum": {
      "enum": [
        "width",
        "height",
        "symbol",
        "category",
        "ordinal",
        "ramp",
        "diverging",
        "heatmap"
      ],
      "type": "string"
    },
    "RangeRaw": {
      "items": {
        "anyOf": [
          {
            "type": "null"
          },
          {
            "type": "boolean"
          },
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "$ref": "#/definitions/RangeRawArray"
          }
        ]
      },
      "type": "array"
    },
    "RangeRawArray": {
      "items": {
        "type": "number"
      },
      "type": "array"
    },
    "RangeScheme": {
      "anyOf": [
        {
          "$ref": "#/definitions/RangeEnum"
        },
        {
          "$ref": "#/definitions/RangeRaw"
        },
        {
          "additionalProperties": false,
          "properties": {
            "count": {
              "type": "number"
            },
            "extent": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "scheme": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "$ref": "#/definitions/ColorScheme"
                }
              ]
            }
          },
          "required": [
            "scheme"
          ],
          "type": "object"
        }
      ]
    },
    "RectEncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "cornerRadius": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "cornerRadiusBottomLeft": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "cornerRadiusBottomRight": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "cornerRadiusTopLeft": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "cornerRadiusTopRight": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "RectMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<RectEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "rect",
          "type": "string"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "RegressionMethod": {
      "enum": [
        "linear",
        "exp",
        "log",
        "quad",
        "poly",
        "pow"
      ],
      "type": "string"
    },
    "RegressionTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "extent": {
          "items": {
            "type": "number"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "groupby": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "method": {
          "$ref": "#/definitions/RegressionMethod"
        },
        "order": {
          "type": "number"
        },
        "params": {
          "type": "boolean"
        },
        "type": {
          "const": "regression",
          "type": "string"
        },
        "x": {
          "$ref": "#/definitions/FieldRef"
        },
        "y": {
          "$ref": "#/definitions/FieldRef"
        }
      },
      "required": [
        "type",
        "x",
        "y"
      ],
      "type": "object"
    },
    "RowColumn<LayoutAlign>": {
      "additionalProperties": false,
      "properties": {
        "column": {
          "$ref": "#/definitions/LayoutAlign"
        },
        "row": {
          "$ref": "#/definitions/LayoutAlign"
        }
      },
      "type": "object"
    },
    "RowColumn<LayoutTitleAnchor>": {
      "additionalProperties": false,
      "properties": {
        "column": {
          "$ref": "#/definitions/LayoutTitleAnchor"
        },
        "row": {
          "$ref": "#/definitions/LayoutTitleAnchor"
        }
      },
      "type": "object"
    },
    "RowColumn<number>": {
      "additionalProperties": false,
      "properties": {
        "column": {
          "type": "number"
        },
        "row": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "RuleEncodeEntry": {
      "$ref": "#/definitions/EncodeEntry"
    },
    "RuleMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<RuleEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "rule",
          "type": "string"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "SampleTransform": {
      "additionalProperties": false,
      "properties": {
        "size": {
          "type": "number"
        },
        "type": {
          "const": "sample",
          "type": "string"
        }
      },
      "required": [
        "type",
        "size"
      ],
      "type": "object"
    },
    "Scale": {
      "anyOf": [
        {
          "$ref": "#/definitions/OrdinalScale"
        },
        {
          "$ref": "#/definitions/BandScale"
        },
        {
          "$ref": "#/definitions/PointScale"
        },
        {
          "$ref": "#/definitions/SequentialScale"
        },
        {
          "$ref": "#/definitions/TimeScale"
        },
        {
          "$ref": "#/definitions/IdentityScale"
        },
        {
          "$ref": "#/definitions/LinearScale"
        },
        {
          "$ref": "#/definitions/LogScale"
        },
        {
          "$ref": "#/definitions/SymLogScale"
        },
        {
          "$ref": "#/definitions/PowScale"
        },
        {
          "$ref": "#/definitions/SqrtScale"
        },
        {
          "$ref": "#/definitions/QuantileScale"
        },
        {
          "$ref": "#/definitions/QuantizeScale"
        },
        {
          "$ref": "#/definitions/ThresholdScale"
        },
        {
          "$ref": "#/definitions/BinOrdinalScale"
        }
      ]
    },
    "ScaleBinParams": {
      "additionalProperties": false,
      "properties": {
        "start": {
          "description": "The starting (lowest-valued) bin boundary.\n\n__Default value:__ The lowest value of the scale domain will be used.",
          "type": "number"
        },
        "step": {
          "description": "The step size defining the bin interval width.",
          "type": "number"
        },
        "stop": {
          "description": "The stopping (highest-valued) bin boundary.\n\n__Default value:__ The highest value of the scale domain will be used.",
          "type": "number"
        }
      },
      "required": [
        "step"
      ],
      "type": "object"
    },
    "ScaleBins": {
      "anyOf": [
        {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        {
          "$ref": "#/definitions/ScaleBinParams"
        }
      ]
    },
    "ScaleData": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "data": {
              "type": "string"
            },
            "field": {
              "$ref": "#/definitions/ScaleField"
            },
            "sort": {
              "$ref": "#/definitions/SortField"
            }
          },
          "required": [
            "data",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "fields": {
              "items": {
                "anyOf": [
                  {
                    "items": {
                      "type": [
                        "string",
                        "number",
                        "boolean"
                      ]
                    },
                    "type": "array"
                  },
                  {
                    "$ref": "#/definitions/ScaleDataRef"
                  }
                ]
              },
              "type": "array"
            },
            "sort": {
              "$ref": "#/definitions/SortField"
            }
          },
          "required": [
            "fields"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "data": {
              "type": "string"
            },
            "fields": {
              "items": {
                "$ref": "#/definitions/ScaleField"
              },
              "type": "array"
            },
            "sort": {
              "$ref": "#/definitions/SortField"
            }
          },
          "required": [
            "data",
            "fields"
          ],
          "type": "object"
        }
      ]
    },
    "ScaleDataRef": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "string"
        },
        "field": {
          "$ref": "#/definitions/ScaleField"
        }
      },
      "required": [
        "data",
        "field"
      ],
      "type": "object"
    },
    "ScaleField": {
      "type": "string"
    },
    "ScaleInterpolate": {
      "anyOf": [
        {
          "$ref": "#/definitions/ScaleInterpolateEnum"
        },
        {
          "$ref": "#/definitions/ScaleInterpolateParams"
        }
      ]
    },
    "ScaleInterpolateEnum": {
      "enum": [
        "rgb",
        "lab",
        "hcl",
        "hsl",
        "hsl-long",
        "hcl-long",
        "cubehelix",
        "cubehelix-long"
      ],
      "type": "string"
    },
    "ScaleInterpolateParams": {
      "additionalProperties": false,
      "properties": {
        "gamma": {
          "type": "number"
        },
        "type": {
          "enum": [
            "rgb",
            "cubehelix",
            "cubehelix-long"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "ScaledValueRef<Align>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<Align>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<Baseline>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<Baseline>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<Blend>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<Blend>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<Color>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<Color>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<Cursor>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<Cursor>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<FontStyle>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<FontStyle>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<FontWeight>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<FontWeight>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<Interpolate>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<Interpolate>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<Orient>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<Orient>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<Orientation>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<Orientation>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<StrokeCap>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<StrokeCap>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<StrokeJoin>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<StrokeJoin>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<SymbolShape>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<SymbolShape>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<Text>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<Text>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<TextBaseline>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<TextBaseline>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<TextDirection>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<TextDirection>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<TitleAnchor>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<TitleAnchor>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<any>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<any>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<any[]>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<any[]>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<boolean>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<boolean>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<number[]>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<number[]>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "ScaledValueRef<string>": {
      "anyOf": [
        {
          "$ref": "#/definitions/BaseValueRef<string>"
        },
        {
          "additionalProperties": false,
          "properties": {
            "scale": {
              "$ref": "#/definitions/Field"
            },
            "value": {
              "type": [
                "boolean",
                "number",
                "string",
                "null"
              ]
            }
          },
          "required": [
            "scale",
            "value"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/Field"
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "field"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "band": {
              "type": [
                "boolean",
                "number"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "band"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "scale": {
              "$ref": "#/definitions/Field"
            }
          },
          "required": [
            "scale",
            "range"
          ],
          "type": "object"
        }
      ]
    },
    "SequenceTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": "string"
        },
        "start": {
          "type": "number"
        },
        "step": {
          "type": "number"
        },
        "stop": {
          "type": "number"
        },
        "type": {
          "const": "sequence",
          "type": "string"
        }
      },
      "required": [
        "type",
        "start",
        "stop"
      ],
      "type": "object"
    },
    "SequentialMultiHue": {
      "enum": [
        "turbo",
        "viridis",
        "inferno",
        "magma",
        "plasma",
        "cividis",
        "bluegreen",
        "bluegreen-3",
        "bluegreen-4",
        "bluegreen-5",
        "bluegreen-6",
        "bluegreen-7",
        "bluegreen-8",
        "bluegreen-9",
        "bluepurple",
        "bluepurple-3",
        "bluepurple-4",
        "bluepurple-5",
        "bluepurple-6",
        "bluepurple-7",
        "bluepurple-8",
        "bluepurple-9",
        "goldgreen",
        "goldgreen-3",
        "goldgreen-4",
        "goldgreen-5",
        "goldgreen-6",
        "goldgreen-7",
        "goldgreen-8",
        "goldgreen-9",
        "goldorange",
        "goldorange-3",
        "goldorange-4",
        "goldorange-5",
        "goldorange-6",
        "goldorange-7",
        "goldorange-8",
        "goldorange-9",
        "goldred",
        "goldred-3",
        "goldred-4",
        "goldred-5",
        "goldred-6",
        "goldred-7",
        "goldred-8",
        "goldred-9",
        "greenblue",
        "greenblue-3",
        "greenblue-4",
        "greenblue-5",
        "greenblue-6",
        "greenblue-7",
        "greenblue-8",
        "greenblue-9",
        "orangered",
        "orangered-3",
        "orangered-4",
        "orangered-5",
        "orangered-6",
        "orangered-7",
        "orangered-8",
        "orangered-9",
        "purplebluegreen",
        "purplebluegreen-3",
        "purplebluegreen-4",
        "purplebluegreen-5",
        "purplebluegreen-6",
        "purplebluegreen-7",
        "purplebluegreen-8",
        "purplebluegreen-9",
        "purpleblue",
        "purpleblue-3",
        "purpleblue-4",
        "purpleblue-5",
        "purpleblue-6",
        "purpleblue-7",
        "purpleblue-8",
        "purpleblue-9",
        "purplered",
        "purplered-3",
        "purplered-4",
        "purplered-5",
        "purplered-6",
        "purplered-7",
        "purplered-8",
        "purplered-9",
        "redpurple",
        "redpurple-3",
        "redpurple-4",
        "redpurple-5",
        "redpurple-6",
        "redpurple-7",
        "redpurple-8",
        "redpurple-9",
        "yellowgreenblue",
        "yellowgreenblue-3",
        "yellowgreenblue-4",
        "yellowgreenblue-5",
        "yellowgreenblue-6",
        "yellowgreenblue-7",
        "yellowgreenblue-8",
        "yellowgreenblue-9",
        "yellowgreen",
        "yellowgreen-3",
        "yellowgreen-4",
        "yellowgreen-5",
        "yellowgreen-6",
        "yellowgreen-7",
        "yellowgreen-8",
        "yellowgreen-9",
        "yelloworangebrown",
        "yelloworangebrown-3",
        "yelloworangebrown-4",
        "yelloworangebrown-5",
        "yelloworangebrown-6",
        "yelloworangebrown-7",
        "yelloworangebrown-8",
        "yelloworangebrown-9",
        "yelloworangered",
        "yelloworangered-3",
        "yelloworangered-4",
        "yelloworangered-5",
        "yelloworangered-6",
        "yelloworangered-7",
        "yelloworangered-8",
        "yelloworangered-9",
        "darkblue",
        "darkblue-3",
        "darkblue-4",
        "darkblue-5",
        "darkblue-6",
        "darkblue-7",
        "darkblue-8",
        "darkblue-9",
        "darkgold",
        "darkgold-3",
        "darkgold-4",
        "darkgold-5",
        "darkgold-6",
        "darkgold-7",
        "darkgold-8",
        "darkgold-9",
        "darkgreen",
        "darkgreen-3",
        "darkgreen-4",
        "darkgreen-5",
        "darkgreen-6",
        "darkgreen-7",
        "darkgreen-8",
        "darkgreen-9",
        "darkmulti",
        "darkmulti-3",
        "darkmulti-4",
        "darkmulti-5",
        "darkmulti-6",
        "darkmulti-7",
        "darkmulti-8",
        "darkmulti-9",
        "darkred",
        "darkred-3",
        "darkred-4",
        "darkred-5",
        "darkred-6",
        "darkred-7",
        "darkred-8",
        "darkred-9",
        "lightgreyred",
        "lightgreyred-3",
        "lightgreyred-4",
        "lightgreyred-5",
        "lightgreyred-6",
        "lightgreyred-7",
        "lightgreyred-8",
        "lightgreyred-9",
        "lightgreyteal",
        "lightgreyteal-3",
        "lightgreyteal-4",
        "lightgreyteal-5",
        "lightgreyteal-6",
        "lightgreyteal-7",
        "lightgreyteal-8",
        "lightgreyteal-9",
        "lightmulti",
        "lightmulti-3",
        "lightmulti-4",
        "lightmulti-5",
        "lightmulti-6",
        "lightmulti-7",
        "lightmulti-8",
        "lightmulti-9",
        "lightorange",
        "lightorange-3",
        "lightorange-4",
        "lightorange-5",
        "lightorange-6",
        "lightorange-7",
        "lightorange-8",
        "lightorange-9",
        "lighttealblue",
        "lighttealblue-3",
        "lighttealblue-4",
        "lighttealblue-5",
        "lighttealblue-6",
        "lighttealblue-7",
        "lighttealblue-8",
        "lighttealblue-9"
      ],
      "type": "string"
    },
    "SequentialScale": {
      "additionalProperties": false,
      "properties": {
        "bins": {
          "$ref": "#/definitions/ScaleBins"
        },
        "clamp": {
          "type": "boolean"
        },
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "interpolate": {
          "$ref": "#/definitions/ScaleInterpolate"
        },
        "name": {
          "type": "string"
        },
        "nice": {
          "type": [
            "boolean",
            "number"
          ]
        },
        "padding": {
          "type": "number"
        },
        "range": {
          "$ref": "#/definitions/RangeScheme"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "sequential",
          "type": "string"
        },
        "zero": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "SequentialSingleHue": {
      "enum": [
        "blues",
        "tealblues",
        "teals",
        "greens",
        "browns",
        "greys",
        "purples",
        "warmgreys",
        "reds",
        "oranges"
      ],
      "type": "string"
    },
    "ShapeEncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "shape": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "ShapeMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<ShapeEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "shape",
          "type": "string"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Signal": {
      "anyOf": [
        {
          "$ref": "#/definitions/NewSignal"
        },
        {
          "$ref": "#/definitions/InitSignal"
        },
        {
          "$ref": "#/definitions/PushSignal"
        }
      ]
    },
    "SignalName": {
      "type": "string"
    },
    "SignalValue": {
    },
    "SortField": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "additionalProperties": false,
          "properties": {
            "order": {
              "$ref": "#/definitions/SortOrder"
            }
          },
          "required": [
            "order"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "field": {
              "$ref": "#/definitions/ScaleField"
            },
            "op": {
              "$ref": "#/definitions/ScaleField"
            },
            "order": {
              "$ref": "#/definitions/SortOrder"
            }
          },
          "required": [
            "op"
          ],
          "type": "object"
        }
      ]
    },
    "SortOrder": {
      "enum": [
        "ascending",
        "descending"
      ],
      "type": "string"
    },
    "SourceData": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnTrigger"
          },
          "type": "array"
        },
        "source": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "source"
      ],
      "type": "object"
    },
    "Spec": {
      "additionalProperties": false,
      "properties": {
        "$schema": {
          "type": "string"
        },
        "autosize": {
          "$ref": "#/definitions/AutoSize"
        },
        "axes": {
          "items": {
            "$ref": "#/definitions/Axis"
          },
          "type": "array"
        },
        "background": {
          "$ref": "#/definitions/Color"
        },
        "config": {
          "$ref": "#/definitions/Config"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/Data"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<EncodeEntry>"
        },
        "height": {
          "type": "number"
        },
        "layout": {
          "$ref": "#/definitions/Layout"
        },
        "legends": {
          "items": {
            "$ref": "#/definitions/Legend"
          },
          "type": "array"
        },
        "marks": {
          "items": {
            "$ref": "#/definitions/Mark"
          },
          "type": "array"
        },
        "padding": {
          "$ref": "#/definitions/Padding"
        },
        "projections": {
          "items": {
            "$ref": "#/definitions/Projection"
          },
          "type": "array"
        },
        "scales": {
          "items": {
            "$ref": "#/definitions/Scale"
          },
          "type": "array"
        },
        "signals": {
          "items": {
            "$ref": "#/definitions/Signal"
          },
          "type": "array"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "title": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Title"
            }
          ]
        },
        "usermeta": {
          "type": "object"
        },
        "width": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "SqrtScale": {
      "additionalProperties": false,
      "properties": {
        "bins": {
          "$ref": "#/definitions/ScaleBins"
        },
        "clamp": {
          "type": "boolean"
        },
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "interpolate": {
          "$ref": "#/definitions/ScaleInterpolate"
        },
        "name": {
          "type": "string"
        },
        "nice": {
          "type": [
            "boolean",
            "number"
          ]
        },
        "padding": {
          "type": "number"
        },
        "range": {
          "$ref": "#/definitions/RangeScheme"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "sqrt",
          "type": "string"
        },
        "zero": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "StackOffset": {
      "enum": [
        "zero",
        "center",
        "normalize"
      ],
      "type": "string"
    },
    "StackTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "groupby": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "offset": {
          "$ref": "#/definitions/StackOffset"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "type": {
          "const": "stack",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "StratifyTransform": {
      "additionalProperties": false,
      "properties": {
        "key": {
          "$ref": "#/definitions/FieldRef"
        },
        "parentKey": {
          "$ref": "#/definitions/FieldRef"
        },
        "type": {
          "const": "stratify",
          "type": "string"
        }
      },
      "required": [
        "type",
        "key",
        "parentKey"
      ],
      "type": "object"
    },
    "Stream": {
      "anyOf": [
        {
          "$ref": "#/definitions/EventStream"
        },
        {
          "$ref": "#/definitions/DerivedStream"
        },
        {
          "$ref": "#/definitions/MergedStream"
        }
      ]
    },
    "StringValue": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/StringValueRef"
        }
      ]
    },
    "StringValueRef": {
      "$ref": "#/definitions/ScaledValueRef<string>"
    },
    "StrokeCap": {
      "enum": [
        "butt",
        "round",
        "square"
      ],
      "type": "string"
    },
    "StrokeCapValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/StrokeCap"
        },
        {
          "$ref": "#/definitions/StrokeCapValueRef"
        }
      ]
    },
    "StrokeCapValueRef": {
      "$ref": "#/definitions/ScaledValueRef<StrokeCap>"
    },
    "StrokeJoin": {
      "enum": [
        "miter",
        "round",
        "bevel"
      ],
      "type": "string"
    },
    "SymLogScale": {
      "additionalProperties": false,
      "properties": {
        "bins": {
          "$ref": "#/definitions/ScaleBins"
        },
        "clamp": {
          "type": "boolean"
        },
        "constant": {
          "type": "number"
        },
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "interpolate": {
          "$ref": "#/definitions/ScaleInterpolate"
        },
        "name": {
          "type": "string"
        },
        "nice": {
          "type": [
            "boolean",
            "number"
          ]
        },
        "padding": {
          "type": "number"
        },
        "range": {
          "$ref": "#/definitions/RangeScheme"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "symlog",
          "type": "string"
        },
        "zero": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "SymbolEncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "angle": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "shape": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<SymbolShape>>"
        },
        "size": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "SymbolMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<SymbolEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "symbol",
          "type": "string"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "SymbolShape": {
      "type": "string"
    },
    "SymbolShapeValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/SymbolShape"
        },
        {
          "$ref": "#/definitions/SymbolShapeValueRef"
        }
      ]
    },
    "SymbolShapeValueRef": {
      "$ref": "#/definitions/ScaledValueRef<SymbolShape>"
    },
    "Text": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      ]
    },
    "TextBaseline": {
      "anyOf": [
        {
          "const": "alphabetic",
          "type": "string"
        },
        {
          "$ref": "#/definitions/Baseline"
        },
        {
          "const": "line-top",
          "type": "string"
        },
        {
          "const": "line-bottom",
          "type": "string"
        }
      ]
    },
    "TextBaselineValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/TextBaseline"
        },
        {
          "$ref": "#/definitions/TextBaselineValueRef"
        }
      ]
    },
    "TextBaselineValueRef": {
      "$ref": "#/definitions/ScaledValueRef<TextBaseline>"
    },
    "TextDirection": {
      "enum": [
        "ltr",
        "rtl"
      ],
      "type": "string"
    },
    "TextEncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "align": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Align>>"
        },
        "angle": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "baseline": {
          "$ref": "#/definitions/ProductionRule<TextBaselineValueRef>"
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "dir": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<TextDirection>>"
        },
        "dx": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "dy": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "ellipsis": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "font": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "fontSize": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "fontStyle": {
          "$ref": "#/definitions/ProductionRule<FontStyleValueRef>"
        },
        "fontWeight": {
          "$ref": "#/definitions/ProductionRule<FontWeightValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "limit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "lineBreak": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "lineHeight": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>",
          "description": "The height, in pixels, of each line of text in a multi-line text mark or a text mark with `\"line-top\"` or `\"line-bottom\"` baseline."
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "radius": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "text": {
          "$ref": "#/definitions/ProductionRule<TextValueRef>"
        },
        "theta": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "TextMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<TextEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "text",
          "type": "string"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "TextValueRef": {
      "$ref": "#/definitions/ScaledValueRef<Text>"
    },
    "ThresholdScale": {
      "additionalProperties": false,
      "properties": {
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "name": {
          "type": "string"
        },
        "nice": {
          "type": [
            "boolean",
            "number"
          ]
        },
        "padding": {
          "type": "number"
        },
        "range": {
          "$ref": "#/definitions/RangeScheme"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "const": "threshold",
          "type": "string"
        },
        "zero": {
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "TickCount": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "$ref": "#/definitions/TimeInterval"
        },
        {
          "$ref": "#/definitions/TimeIntervalStep"
        }
      ]
    },
    "TimeFormatSpecifier": {
      "additionalProperties": false,
      "properties": {
        "date": {
          "type": "string"
        },
        "day": {
          "type": "string"
        },
        "hours": {
          "type": "string"
        },
        "milliseconds": {
          "type": "string"
        },
        "minutes": {
          "type": "string"
        },
        "month": {
          "type": "string"
        },
        "quarter": {
          "type": "string"
        },
        "seconds": {
          "type": "string"
        },
        "week": {
          "type": "string"
        },
        "year": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimeInterval": {
      "enum": [
        "millisecond",
        "second",
        "minute",
        "hour",
        "day",
        "week",
        "month",
        "year"
      ],
      "type": "string"
    },
    "TimeIntervalStep": {
      "additionalProperties": false,
      "properties": {
        "interval": {
          "$ref": "#/definitions/TimeInterval"
        },
        "step": {
          "type": "number"
        }
      },
      "required": [
        "interval",
        "step"
      ],
      "type": "object"
    },
    "TimeLocale": {
      "additionalProperties": false,
      "description": "Locale definition for formatting dates and times.",
      "properties": {
        "date": {
          "description": "The date (%x) format specifier (e.g., \"%m/%d/%Y\").",
          "type": "string"
        },
        "dateTime": {
          "description": "The date and time (%c) format specifier (e.g., \"%a %b %e %X %Y\").",
          "type": "string"
        },
        "days": {
          "$ref": "#/definitions/Vector7<string>",
          "description": "The full names of the weekdays, starting with Sunday."
        },
        "months": {
          "$ref": "#/definitions/Vector12<string>",
          "description": "The full names of the months (starting with January)."
        },
        "periods": {
          "$ref": "#/definitions/Vector2<string>",
          "description": "The A.M. and P.M. equivalents (e.g., [\"AM\", \"PM\"])."
        },
        "shortDays": {
          "$ref": "#/definitions/Vector7<string>",
          "description": "The abbreviated names of the weekdays, starting with Sunday."
        },
        "shortMonths": {
          "$ref": "#/definitions/Vector12<string>",
          "description": "The abbreviated names of the months (starting with January)."
        },
        "time": {
          "description": "The time (%X) format specifier (e.g., \"%H:%M:%S\").",
          "type": "string"
        }
      },
      "required": [
        "dateTime",
        "date",
        "time",
        "periods",
        "days",
        "shortDays",
        "months",
        "shortMonths"
      ],
      "type": "object"
    },
    "TimeScale": {
      "additionalProperties": false,
      "properties": {
        "bins": {
          "$ref": "#/definitions/ScaleBins"
        },
        "clamp": {
          "type": "boolean"
        },
        "domain": {
          "anyOf": [
            {
              "items": {
                "type": [
                  "null",
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/ScaleData"
            }
          ]
        },
        "domainMax": {
          "type": "number"
        },
        "domainMid": {
          "type": "number"
        },
        "domainMin": {
          "type": "number"
        },
        "domainRaw": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "items": {
              },
              "type": "array"
            }
          ]
        },
        "interpolate": {
          "$ref": "#/definitions/ScaleInterpolate"
        },
        "name": {
          "type": "string"
        },
        "nice": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/definitions/TimeInterval"
            },
            {
              "$ref": "#/definitions/TimeIntervalStep"
            }
          ]
        },
        "padding": {
          "type": "number"
        },
        "range": {
          "$ref": "#/definitions/RangeScheme"
        },
        "reverse": {
          "type": "boolean"
        },
        "round": {
          "type": "boolean"
        },
        "type": {
          "enum": [
            "time",
            "utc"
          ],
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "TimeUnit": {
      "enum": [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "date",
        "dayofyear",
        "hours",
        "minutes",
        "seconds",
        "milliseconds"
      ],
      "type": "string"
    },
    "TimeUnitTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector2<string>"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "interval": {
          "type": "boolean"
        },
        "signal": {
          "$ref": "#/definitions/SignalName"
        },
        "step": {
          "type": "number"
        },
        "timezone": {
          "$ref": "#/definitions/TimeZone"
        },
        "type": {
          "const": "timeunit",
          "type": "string"
        },
        "units": {
          "items": {
            "$ref": "#/definitions/TimeUnit"
          },
          "type": "array"
        }
      },
      "required": [
        "type",
        "field"
      ],
      "type": "object"
    },
    "TimeZone": {
      "enum": [
        "local",
        "utc"
      ],
      "type": "string"
    },
    "Title": {
      "additionalProperties": false,
      "properties": {
        "align": {
          "$ref": "#/definitions/AlignValue",
          "description": "Horizontal text alignment for title text. One of `\"left\"`, `\"center\"`, or `\"right\"`."
        },
        "anchor": {
          "$ref": "#/definitions/AnchorValue",
          "description": "The anchor position for placing the title and subtitle text. One of `\"start\"`, `\"middle\"`, or `\"end\"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title."
        },
        "angle": {
          "$ref": "#/definitions/NumberValue",
          "description": "Angle in degrees of title and subtitle text."
        },
        "aria": {
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG group, removing the title from the ARIA accessibility tree.\n\n__Default value:__ `true`",
          "type": "boolean"
        },
        "baseline": {
          "$ref": "#/definitions/TextBaselineValue",
          "description": "Vertical text baseline for title and subtitle text. One of `\"alphabetic\"` (default), `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"line-top\"`, or `\"line-bottom\"`. The `\"line-top\"` and `\"line-bottom\"` values operate similarly to `\"top\"` and `\"bottom\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."
        },
        "color": {
          "$ref": "#/definitions/ColorValue",
          "description": "Text color for title text."
        },
        "dx": {
          "$ref": "#/definitions/NumberValue",
          "description": "Delta offset for title and subtitle text x-coordinate."
        },
        "dy": {
          "$ref": "#/definitions/NumberValue",
          "description": "Delta offset for title and subtitle text y-coordinate."
        },
        "encode": {
          "anyOf": [
            {
              "$ref": "#/definitions/TitleEncode"
            },
            {
              "$ref": "#/definitions/Encode<TextEncodeEntry>"
            }
          ],
          "description": "Mark definitions for custom title encoding."
        },
        "font": {
          "$ref": "#/definitions/StringValue",
          "description": "Font name for title text."
        },
        "fontSize": {
          "$ref": "#/definitions/NumberValue",
          "description": "Font size in pixels for title text.",
          "minimum": 0
        },
        "fontStyle": {
          "$ref": "#/definitions/FontStyleValue",
          "description": "Font style for title text."
        },
        "fontWeight": {
          "$ref": "#/definitions/FontWeightValue",
          "description": "Font weight for title text. This can be either a string (e.g `\"bold\"`, `\"normal\"`) or a number (`100`, `200`, `300`, ..., `900` where `\"normal\"` = `400` and `\"bold\"` = `700`)."
        },
        "frame": {
          "anyOf": [
            {
              "$ref": "#/definitions/TitleFrame"
            },
            {
              "$ref": "#/definitions/StringValue"
            }
          ],
          "description": "The reference frame for the anchor position, one of `\"bounds\"` (to anchor relative to the full bounding box) or `\"group\"` (to anchor relative to the group width or height)."
        },
        "interactive": {
          "description": "A boolean flag indicating if the title element should respond to input events such as mouse hover. (**Deprecated.**)",
          "type": "boolean"
        },
        "limit": {
          "$ref": "#/definitions/NumberValue",
          "description": "The maximum allowed length in pixels of title and subtitle text.",
          "minimum": 0
        },
        "lineHeight": {
          "$ref": "#/definitions/NumberValue",
          "description": "Line height in pixels for multi-line title text or title text with `\"line-top\"` or `\"line-bottom\"` baseline."
        },
        "name": {
          "description": "A mark name property to apply to the title text mark. (**Deprecated.**)",
          "type": "string"
        },
        "offset": {
          "$ref": "#/definitions/NumberValue",
          "description": "The orthogonal offset in pixels by which to displace the title group from its position along the edge of the chart."
        },
        "orient": {
          "$ref": "#/definitions/TitleOrient",
          "description": "Default title orientation (`\"top\"`, `\"bottom\"`, `\"left\"`, or `\"right\"`)"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "A mark style property to apply to the title text mark. If not specified, a default style of `\"group-title\"` is applied. (**Deprecated**)"
        },
        "subtitle": {
          "$ref": "#/definitions/Text",
          "description": "The subtitle text."
        },
        "subtitleColor": {
          "$ref": "#/definitions/ColorValue",
          "description": "Text color for subtitle text."
        },
        "subtitleFont": {
          "$ref": "#/definitions/StringValue",
          "description": "Font name for subtitle text."
        },
        "subtitleFontSize": {
          "$ref": "#/definitions/NumberValue",
          "description": "Font size in pixels for subtitle text.",
          "minimum": 0
        },
        "subtitleFontStyle": {
          "$ref": "#/definitions/FontStyleValue",
          "description": "Font style for subtitle text."
        },
        "subtitleFontWeight": {
          "$ref": "#/definitions/FontWeightValue",
          "description": "Font weight for subtitle text. This can be either a string (e.g `\"bold\"`, `\"normal\"`) or a number (`100`, `200`, `300`, ..., `900` where `\"normal\"` = `400` and `\"bold\"` = `700`)."
        },
        "subtitleLineHeight": {
          "$ref": "#/definitions/NumberValue",
          "description": "Line height in pixels for multi-line subtitle text."
        },
        "subtitlePadding": {
          "$ref": "#/definitions/NumberValue",
          "description": "The padding in pixels between title and subtitle text."
        },
        "text": {
          "$ref": "#/definitions/Text",
          "description": "The title text."
        },
        "zindex": {
          "description": "The integer z-index indicating the layering of the title group relative to other axis, mark, and legend groups.\n\n__Default value:__ `0`.",
          "minimum": 0,
          "type": "number"
        }
      },
      "required": [
        "text"
      ],
      "type": "object"
    },
    "TitleAnchor": {
      "enum": [
        null,
        "start",
        "middle",
        "end"
      ],
      "type": [
        "null",
        "string"
      ]
    },
    "TitleConfig": {
      "$ref": "#/definitions/ExcludeMappedValueRef<BaseTitle>"
    },
    "TitleEncode": {
      "additionalProperties": false,
      "properties": {
        "group": {
          "$ref": "#/definitions/GuideEncodeEntry<GroupEncodeEntry>",
          "description": "Custom encoding for the title container group."
        },
        "subtitle": {
          "$ref": "#/definitions/GuideEncodeEntry<TextEncodeEntry>",
          "description": "Custom encoding for the subtitle text."
        },
        "title": {
          "$ref": "#/definitions/GuideEncodeEntry<TextEncodeEntry>",
          "description": "Custom encoding for the title text."
        }
      },
      "type": "object"
    },
    "TitleFrame": {
      "enum": [
        "bounds",
        "group"
      ],
      "type": "string"
    },
    "TitleOrient": {
      "enum": [
        "none",
        "left",
        "right",
        "top",
        "bottom"
      ],
      "type": "string"
    },
    "TrailEncodeEntry": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/ProductionRule<ArbitraryValueRef>"
          },
          {
            "not": {
            }
          }
        ]
      },
      "properties": {
        "aria": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>",
          "description": "A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree."
        },
        "ariaRole": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"role\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "ariaRoleDescription": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \"aria-roledescription\" attribute. Warning: this property is experimental and may be changed in the future."
        },
        "blend": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Blend>>"
        },
        "cursor": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<Cursor>>"
        },
        "defined": {
          "$ref": "#/definitions/ProductionRule<BooleanValueRef>"
        },
        "description": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>",
          "description": "A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)."
        },
        "fill": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "fillOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "height": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "opacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "stroke": {
          "$ref": "#/definitions/ProductionRule<ColorValueRef>"
        },
        "strokeCap": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeCap>>"
        },
        "strokeDash": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<number[]>>"
        },
        "strokeDashOffset": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeJoin": {
          "$ref": "#/definitions/ProductionRule<ScaledValueRef<StrokeJoin>>"
        },
        "strokeMiterLimit": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeOpacity": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "tooltip": {
          "$ref": "#/definitions/ProductionRule<StringValueRef>"
        },
        "width": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "x2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "xc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "y2": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "yc": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        },
        "zindex": {
          "$ref": "#/definitions/ProductionRule<NumericValueRef>"
        }
      },
      "type": "object"
    },
    "TrailMark": {
      "additionalProperties": false,
      "properties": {
        "aria": {
          "type": "boolean"
        },
        "clip": {
          "$ref": "#/definitions/Clip"
        },
        "description": {
          "type": "string"
        },
        "encode": {
          "$ref": "#/definitions/Encode<TrailEncodeEntry>"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "interactive": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnMarkTrigger"
          },
          "type": "array"
        },
        "role": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "style": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "type": {
          "const": "trail",
          "type": "string"
        },
        "zindex": {
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "TransformField": {
      "anyOf": [
        {
          "$ref": "#/definitions/FieldParam"
        },
        {
          "$ref": "#/definitions/ExprRef"
        }
      ]
    },
    "Transforms": {
      "anyOf": [
        {
          "$ref": "#/definitions/AggregateTransform"
        },
        {
          "$ref": "#/definitions/BinTransform"
        },
        {
          "$ref": "#/definitions/CollectTransform"
        },
        {
          "$ref": "#/definitions/CountPatternTransform"
        },
        {
          "$ref": "#/definitions/ContourTransform"
        },
        {
          "$ref": "#/definitions/CrossTransform"
        },
        {
          "$ref": "#/definitions/CrossFilterTransform"
        },
        {
          "$ref": "#/definitions/DensityTransform"
        },
        {
          "$ref": "#/definitions/DotBinTransform"
        },
        {
          "$ref": "#/definitions/ExtentTransform"
        },
        {
          "$ref": "#/definitions/FilterTransform"
        },
        {
          "$ref": "#/definitions/FlattenTransform"
        },
        {
          "$ref": "#/definitions/FoldTransform"
        },
        {
          "$ref": "#/definitions/ForceTransform"
        },
        {
          "$ref": "#/definitions/FormulaTransform"
        },
        {
          "$ref": "#/definitions/HeatmapTransform"
        },
        {
          "$ref": "#/definitions/GeoJSONTransform"
        },
        {
          "$ref": "#/definitions/GeoPathTransform"
        },
        {
          "$ref": "#/definitions/GeoPointTransform"
        },
        {
          "$ref": "#/definitions/GeoShapeTransform"
        },
        {
          "$ref": "#/definitions/GraticuleTransform"
        },
        {
          "$ref": "#/definitions/IdentifierTransform"
        },
        {
          "$ref": "#/definitions/ImputeTransform"
        },
        {
          "$ref": "#/definitions/IsocontourTransform"
        },
        {
          "$ref": "#/definitions/JoinAggregateTransform"
        },
        {
          "$ref": "#/definitions/KDETransform"
        },
        {
          "$ref": "#/definitions/KDE2DTransform"
        },
        {
          "$ref": "#/definitions/LabelTransform"
        },
        {
          "$ref": "#/definitions/LinkPathTransform"
        },
        {
          "$ref": "#/definitions/LoessTransform"
        },
        {
          "$ref": "#/definitions/LookupTransform"
        },
        {
          "$ref": "#/definitions/NestTransform"
        },
        {
          "$ref": "#/definitions/PackTransform"
        },
        {
          "$ref": "#/definitions/PartitionTransform"
        },
        {
          "$ref": "#/definitions/PieTransform"
        },
        {
          "$ref": "#/definitions/PivotTransform"
        },
        {
          "$ref": "#/definitions/ProjectTransform"
        },
        {
          "$ref": "#/definitions/QuantileTransform"
        },
        {
          "$ref": "#/definitions/RegressionTransform"
        },
        {
          "$ref": "#/definitions/SampleTransform"
        },
        {
          "$ref": "#/definitions/SequenceTransform"
        },
        {
          "$ref": "#/definitions/StackTransform"
        },
        {
          "$ref": "#/definitions/StratifyTransform"
        },
        {
          "$ref": "#/definitions/TimeUnitTransform"
        },
        {
          "$ref": "#/definitions/TreeTransform"
        },
        {
          "$ref": "#/definitions/TreeLinksTransform"
        },
        {
          "$ref": "#/definitions/TreemapTransform"
        },
        {
          "$ref": "#/definitions/VoronoiTransform"
        },
        {
          "$ref": "#/definitions/WindowTransform"
        },
        {
          "$ref": "#/definitions/WordcloudTransform"
        }
      ]
    },
    "TreeLinksTransform": {
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "treelinks",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "TreeMethod": {
      "enum": [
        "tidy",
        "cluster"
      ],
      "type": "string"
    },
    "TreeTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector4<string>"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "method": {
          "$ref": "#/definitions/TreeMethod"
        },
        "nodeSize": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "separation": {
          "type": "boolean"
        },
        "size": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "type": {
          "const": "tree",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "TreemapMethod": {
      "enum": [
        "squarify",
        "resquarify",
        "binary",
        "dice",
        "slice",
        "slicedice"
      ],
      "type": "string"
    },
    "TreemapTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector6<string>"
        },
        "field": {
          "$ref": "#/definitions/FieldRef"
        },
        "method": {
          "$ref": "#/definitions/TreemapMethod"
        },
        "padding": {
          "type": "number"
        },
        "paddingBottom": {
          "type": "number"
        },
        "paddingInner": {
          "type": "number"
        },
        "paddingLeft": {
          "type": "number"
        },
        "paddingOuter": {
          "type": "number"
        },
        "paddingRight": {
          "type": "number"
        },
        "paddingTop": {
          "type": "number"
        },
        "ratio": {
          "type": "number"
        },
        "round": {
          "type": "boolean"
        },
        "size": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "type": {
          "const": "treemap",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "URI": {
      "format": "uri-reference",
      "type": "string"
    },
    "Update": {
      "anyOf": [
        {
          "$ref": "#/definitions/Expr"
        },
        {
          "$ref": "#/definitions/ExprRef"
        },
        {
          "additionalProperties": false,
          "properties": {
            "value": {
              "$ref": "#/definitions/SignalValue"
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        }
      ]
    },
    "UrlData": {
      "additionalProperties": false,
      "properties": {
        "async": {
          "type": "boolean"
        },
        "format": {
          "$ref": "#/definitions/Format"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnTrigger"
          },
          "type": "array"
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "url": {
          "$ref": "#/definitions/URI"
        }
      },
      "required": [
        "name",
        "url"
      ],
      "type": "object"
    },
    "ValuesData": {
      "additionalProperties": false,
      "properties": {
        "async": {
          "type": "boolean"
        },
        "format": {
          "$ref": "#/definitions/Format"
        },
        "name": {
          "type": "string"
        },
        "on": {
          "items": {
            "$ref": "#/definitions/OnTrigger"
          },
          "type": "array"
        },
        "transform": {
          "items": {
            "$ref": "#/definitions/Transforms"
          },
          "type": "array"
        },
        "values": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/definitions/Datum"
              },
              "type": "array"
            },
            {
              "type": "object"
            }
          ]
        }
      },
      "required": [
        "name",
        "values"
      ],
      "type": "object"
    },
    "Vector10<string>": {
      "items": {
        "type": "string"
      },
      "maxItems": 10,
      "minItems": 10,
      "type": "array"
    },
    "Vector12<string>": {
      "items": {
        "type": "string"
      },
      "maxItems": 12,
      "minItems": 12,
      "type": "array"
    },
    "Vector2<(number|null)>": {
      "items": {
        "type": [
          "number",
          "null"
        ]
      },
      "maxItems": 2,
      "minItems": 2,
      "type": "array"
    },
    "Vector2<FieldRef>": {
      "items": {
        "$ref": "#/definitions/FieldRef"
      },
      "maxItems": 2,
      "minItems": 2,
      "type": "array"
    },
    "Vector2<Vector2<number>>": {
      "items": {
        "$ref": "#/definitions/Vector2<number>"
      },
      "maxItems": 2,
      "minItems": 2,
      "type": "array"
    },
    "Vector2<number>": {
      "items": {
        "type": "number"
      },
      "maxItems": 2,
      "minItems": 2,
      "type": "array"
    },
    "Vector2<string>": {
      "items": {
        "type": "string"
      },
      "maxItems": 2,
      "minItems": 2,
      "type": "array"
    },
    "Vector3<number>": {
      "items": {
        "type": "number"
      },
      "maxItems": 3,
      "minItems": 3,
      "type": "array"
    },
    "Vector4<string>": {
      "items": {
        "type": "string"
      },
      "maxItems": 4,
      "minItems": 4,
      "type": "array"
    },
    "Vector5<string>": {
      "items": {
        "type": "string"
      },
      "maxItems": 5,
      "minItems": 5,
      "type": "array"
    },
    "Vector6<string>": {
      "items": {
        "type": "string"
      },
      "maxItems": 6,
      "minItems": 6,
      "type": "array"
    },
    "Vector7<string>": {
      "items": {
        "type": "string"
      },
      "maxItems": 7,
      "minItems": 7,
      "type": "array"
    },
    "VoronoiTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": "string"
        },
        "extent": {
          "$ref": "#/definitions/Vector2<Vector2<number>>"
        },
        "size": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "type": {
          "const": "voronoi",
          "type": "string"
        },
        "x": {
          "$ref": "#/definitions/FieldRef"
        },
        "y": {
          "$ref": "#/definitions/FieldRef"
        }
      },
      "required": [
        "type",
        "x",
        "y"
      ],
      "type": "object"
    },
    "WindowEventType": {
      "anyOf": [
        {
          "$ref": "#/definitions/EventType"
        },
        {
          "type": "string"
        }
      ]
    },
    "WindowOnlyOp": {
      "enum": [
        "row_number",
        "rank",
        "dense_rank",
        "percent_rank",
        "cume_dist",
        "ntile",
        "lag",
        "lead",
        "first_value",
        "last_value",
        "nth_value",
        "prev_value",
        "next_value"
      ],
      "type": "string"
    },
    "WindowTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": "array"
        },
        "fields": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/FieldRef"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": "array"
        },
        "frame": {
          "$ref": "#/definitions/Vector2<(number|null)>"
        },
        "groupby": {
          "items": {
            "$ref": "#/definitions/FieldRef"
          },
          "type": "array"
        },
        "ignorePeers": {
          "type": "boolean"
        },
        "ops": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/AggregateOp"
              },
              {
                "$ref": "#/definitions/WindowOnlyOp"
              }
            ]
          },
          "type": "array"
        },
        "params": {
          "items": {
            "type": [
              "number",
              "null"
            ]
          },
          "type": "array"
        },
        "sort": {
          "$ref": "#/definitions/Compare"
        },
        "type": {
          "const": "window",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "WordcloudSpiral": {
      "enum": [
        "archimedian",
        "rectangular"
      ],
      "type": "string"
    },
    "WordcloudTransform": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "$ref": "#/definitions/Vector7<string>"
        },
        "font": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "fontSize": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "fontSizeRange": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "fontStyle": {
          "anyOf": [
            {
              "$ref": "#/definitions/FontStyle"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "fontWeight": {
          "anyOf": [
            {
              "$ref": "#/definitions/FontWeight"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "padding": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "rotate": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "size": {
          "$ref": "#/definitions/Vector2<number>"
        },
        "spiral": {
          "$ref": "#/definitions/WordcloudSpiral"
        },
        "text": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TransformField"
            }
          ]
        },
        "type": {
          "const": "wordcloud",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    }
  }
}
